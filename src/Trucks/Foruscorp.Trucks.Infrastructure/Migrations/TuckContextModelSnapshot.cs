// <auto-generated />
using System;
using Foruscorp.Trucks.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Foruscorp.Trucks.Infrastructure.Migrations
{
    [DbContext(typeof(TruckContext))]
    partial class TuckContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Tuck")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Companys.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ExternalToken")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Companys", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Companys.CompanyManager", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyManagers", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.DriverFuelHistorys.DriverFuelHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("FuelAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverFuelHistories", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Drivers.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TelegramLink")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Contacts", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Drivers.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("integer");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TruckId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("TruckId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Drivers", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Drivers.DriverBonus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("BonusId");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AwardedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverBonuses", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Reports.ReportLoadAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("FailedFiles")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SuccessfullyProcessedFiles")
                        .HasColumnType("integer");

                    b.Property<int>("TotalFiles")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompletedAt");

                    b.HasIndex("IsSuccessful");

                    b.HasIndex("StartedAt");

                    b.ToTable("ReportLoadAttempts", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.RouteOffers.RouteOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("RouteOfferId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TruckId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("RouteOffers", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Transactions.Fill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Invoice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Odometer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TranDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TranTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Driver");

                    b.HasIndex("Invoice");

                    b.HasIndex("TransactionId");

                    b.HasIndex("Unit");

                    b.ToTable("Fills", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Transactions.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DB")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FillId")
                        .HasColumnType("uuid");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FillId");

                    b.HasIndex("Type");

                    b.ToTable("Items", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Card")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Card");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Group");

                    b.ToTable("Transactions", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Trucks.ModelTruckGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AverageFuelConsumption")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("AveregeWeight")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("FuelCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TruckGrouName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Make");

                    b.HasIndex("Model");

                    b.HasIndex("TruckGrouName");

                    b.HasIndex("Year");

                    b.ToTable("ModelTruckGroups", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Trucks.Truck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<string>("HarshAccelerationSettingType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ModelTruckGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ProviderTruckId")
                        .HasColumnType("text");

                    b.Property<string>("Serial")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Vin")
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DriverId");

                    b.HasIndex("LicensePlate");

                    b.HasIndex("ModelTruckGroupId");

                    b.HasIndex("Serial");

                    b.HasIndex("Vin");

                    b.ToTable("Trucks", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Trucks.TruckUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("TruckId");

                    b.ToTable("TruckUsages", "Truck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Users.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.ToTable("Users", "Tuck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Companys.CompanyManager", b =>
                {
                    b.HasOne("Foruscorp.Trucks.Domain.Companys.Company", "Company")
                        .WithMany("CompanyManagers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foruscorp.Trucks.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.DriverFuelHistorys.DriverFuelHistory", b =>
                {
                    b.HasOne("Foruscorp.Trucks.Domain.Drivers.Driver", null)
                        .WithMany("FuelHistories")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Drivers.Driver", b =>
                {
                    b.HasOne("Foruscorp.Trucks.Domain.Companys.Company", null)
                        .WithMany("Drivers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Foruscorp.Trucks.Domain.Trucks.Truck", "Truck")
                        .WithOne("Driver")
                        .HasForeignKey("Foruscorp.Trucks.Domain.Drivers.Driver", "TruckId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Foruscorp.Trucks.Domain.Users.User", "DriverUser")
                        .WithOne()
                        .HasForeignKey("Foruscorp.Trucks.Domain.Drivers.Driver", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DriverUser");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Drivers.DriverBonus", b =>
                {
                    b.HasOne("Foruscorp.Trucks.Domain.Drivers.Driver", null)
                        .WithMany("Bonuses")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Reports.ReportLoadAttempt", b =>
                {
                    b.OwnsMany("Foruscorp.Trucks.Domain.Reports.FileProcessingResult", "FileResults", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("ErrorMessage")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<bool>("IsSuccess")
                                .HasColumnType("boolean");

                            b1.Property<DateTime>("ProcessedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("ReportLoadAttemptId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("FileName");

                            b1.HasIndex("IsSuccess");

                            b1.HasIndex("ProcessedAt");

                            b1.HasIndex("ReportLoadAttemptId");

                            b1.ToTable("ReportFileProcessingResults", "Tuck");

                            b1.WithOwner()
                                .HasForeignKey("ReportLoadAttemptId");
                        });

                    b.Navigation("FileResults");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.RouteOffers.RouteOffer", b =>
                {
                    b.HasOne("Foruscorp.Trucks.Domain.Drivers.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Transactions.Fill", b =>
                {
                    b.HasOne("Foruscorp.Trucks.Domain.Transactions.Transaction", null)
                        .WithMany("Fills")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Transactions.Item", b =>
                {
                    b.HasOne("Foruscorp.Trucks.Domain.Transactions.Fill", null)
                        .WithMany("Items")
                        .HasForeignKey("FillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Trucks.Truck", b =>
                {
                    b.HasOne("Foruscorp.Trucks.Domain.Companys.Company", null)
                        .WithMany("Trucks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Foruscorp.Trucks.Domain.Trucks.ModelTruckGroup", "ModelTruckGroup")
                        .WithMany("Trucks")
                        .HasForeignKey("ModelTruckGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ModelTruckGroup");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Trucks.TruckUsage", b =>
                {
                    b.HasOne("Foruscorp.Trucks.Domain.Drivers.Driver", "Driver")
                        .WithMany("TruckUsageHistory")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foruscorp.Trucks.Domain.Trucks.Truck", "Truck")
                        .WithMany("TruckUsageHistory")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Users.User", b =>
                {
                    b.HasOne("Foruscorp.Trucks.Domain.Drivers.Contact", "Contact")
                        .WithOne()
                        .HasForeignKey("Foruscorp.Trucks.Domain.Users.User", "ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Companys.Company", b =>
                {
                    b.Navigation("CompanyManagers");

                    b.Navigation("Drivers");

                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Drivers.Driver", b =>
                {
                    b.Navigation("Bonuses");

                    b.Navigation("FuelHistories");

                    b.Navigation("TruckUsageHistory");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Transactions.Fill", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Transactions.Transaction", b =>
                {
                    b.Navigation("Fills");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Trucks.ModelTruckGroup", b =>
                {
                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("Foruscorp.Trucks.Domain.Trucks.Truck", b =>
                {
                    b.Navigation("Driver");

                    b.Navigation("TruckUsageHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
