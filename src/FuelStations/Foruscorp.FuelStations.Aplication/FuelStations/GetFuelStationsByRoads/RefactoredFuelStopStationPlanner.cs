using Foruscorp.FuelStations.Domain.FuelStations;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Foruscorp.FuelStations.Aplication.FuelStations.GetFuelStationsByRoads
{
    /// <summary>
    /// –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏ –∏ —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    /// </summary>
    public class RefactoredFuelStopStationPlanner
    {
        private readonly IRouteAnalyzer _routeAnalyzer;
        private readonly IRecursiveFuelPlanner _fuelPlanner;

        public RefactoredFuelStopStationPlanner(
            IRouteAnalyzer routeAnalyzer = null,
            IRecursiveFuelPlanner fuelPlanner = null)
        {
            _routeAnalyzer = routeAnalyzer ?? new NewRouteAnalyzer();
            _fuelPlanner = fuelPlanner ?? new RecursiveFuelPlanner();
        }

        /// <summary>
        /// üöÄ –ù–û–í–´–ô –ú–ï–¢–û–î: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º –ø–µ—Ä–µ–±–æ—Ä–æ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫
        /// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Ü–µ–Ω–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º
        /// </summary>
        public StopPlanInfo PlanStopsWithComprehensiveOptimization(
            List<GeoPoint> route,
            List<FuelStation> stationsAlongRoute,
            double totalRouteDistanceKm,
            double fuelConsumptionPerKm,
            double currentFuelLiters,
            double tankCapacity,
            List<RequiredStationDto> requiredStops,
            double finishFuel)
        {
            Console.WriteLine("üîç –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò");
            Console.WriteLine("=====================================");

            var chainOptimizer = new ComprehensiveChainOptimizer(
                new SmartChainCostCalculator(),
                new ComprehensiveChainValidator());

            var result = chainOptimizer.FindOptimalChainComprehensive(
                route, stationsAlongRoute, totalRouteDistanceKm, fuelConsumptionPerKm,
                currentFuelLiters, tankCapacity, requiredStops, finishFuel);

            Console.WriteLine("‚úÖ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê");
            return result;
        }

        public StopPlanInfo PlanStopsByStations(
            List<GeoPoint> route,
            List<FuelStation> stationsAlongRoute,
            double totalRouteDistanceKm,
            double fuelConsumptionPerKm,
            double currentFuelLiters,
            double tankCapacity,
            List<RequiredStationDto> requiredStops,
            double finishFuel,
            string roadSectionId = null)
        {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            ValidateInputParameters(finishFuel, tankCapacity, totalRouteDistanceKm);

            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            var context = new FuelPlanningContext
            {
                Route = route,
                TotalDistanceKm = totalRouteDistanceKm,
                FuelConsumptionPerKm = fuelConsumptionPerKm,
                CurrentFuelLiters = currentFuelLiters,
                TankCapacity = tankCapacity,
                FinishFuel = finishFuel,
                RequiredStops = requiredStops ?? new List<RequiredStationDto>(),
                RoadSectionId = roadSectionId ?? string.Empty
            };

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç
            var stationInfos = _routeAnalyzer.AnalyzeStations(route, stationsAlongRoute, totalRouteDistanceKm);

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            var stops = _fuelPlanner.PlanStopsRecursively(stationInfos, context);

            return new StopPlanInfo
            {
                StopPlan = stops,
                Finish = CalculateFinishInfo(stops, context)
            };
        }

        private static void ValidateInputParameters(double finishFuel, double tankCapacity, double totalRouteDistanceKm)
        {
            if (finishFuel < 0 || finishFuel > tankCapacity)
                throw new ArgumentException($"finishFuel must be between 0 and tankCapacity ({tankCapacity} liters).");

            if (totalRouteDistanceKm <= 0)
                throw new ArgumentException("totalRouteDistanceKm must be positive.");
        }

        private static FinishInfo CalculateFinishInfo(List<FuelStopPlan> stops, FuelPlanningContext context)
        {
            if (!stops.Any())
            {
                var fuelUsed = context.TotalDistanceKm * context.FuelConsumptionPerKm;
                var finalFuelA = context.CurrentFuelLiters - fuelUsed;
                return new FinishInfo { RemainingFuelLiters = Math.Max(finalFuelA, context.FinishFuel) };
            }

            var lastStop = stops.Last();
            var fuelAfterLastStop = lastStop.CurrentFuelLiters + lastStop.RefillLiters;
            var distanceToFinish = context.TotalDistanceKm - lastStop.StopAtKm;
            var fuelUsedToFinish = distanceToFinish * context.FuelConsumptionPerKm;
            var finalFuel = fuelAfterLastStop - fuelUsedToFinish;

            return new FinishInfo { RemainingFuelLiters = Math.Max(finalFuel, context.FinishFuel) };
        }
    }

    #region Interfaces

    public interface IRouteAnalyzer
    {
        List<StationInfo> AnalyzeStations(List<GeoPoint> route, List<FuelStation> stations, double totalDistance);
    }

    public interface IRecursiveFuelPlanner
    {
        List<FuelStopPlan> PlanStopsRecursively(List<StationInfo> stations, FuelPlanningContext context);
    }

    public interface IStationSelector
    {
        StationInfo? SelectOptimalStation(List<StationInfo> candidates, NewFuelState currentState, FuelPlanningContext context);
    }

    public interface IRefillCalculator
    {
        double CalculateOptimalRefill(StationInfo station, NewFuelState currentState, FuelPlanningContext context, List<StationInfo> allStations);
    }

    #endregion

    #region Implementations

    public class NewRouteAnalyzer : IRouteAnalyzer
    {

        public List<StationInfo> AnalyzeStations(List<GeoPoint> route, List<FuelStation> stations, double totalDistance)
        {
            return stations
                .Select(station => CreateStationInfo(route, station))
                .Where(info => info != null)
                .OrderBy(info => info.ForwardDistanceKm)
                .ToList();
        }

        private StationInfo? CreateStationInfo(List<GeoPoint> route, FuelStation station)
        {
            var forwardDistance = CalculateForwardDistanceRecursively(route, station.Coordinates, 0, 0.0);
            
            if (forwardDistance >= double.MaxValue)
                return null;

            var price = GetCheapestFuelPrice(station);
            if (price <= 0)
                return null;

            return new StationInfo
            {
                Station = station,
                ForwardDistanceKm = forwardDistance,
                PricePerLiter = price
            };
        }

        /// <summary>
        /// –†–ï–ö–£–†–°–ò–Ø 1: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Å—Ç–∞–Ω—Ü–∏–∏ –≤–¥–æ–ª—å –º–∞—Ä—à—Ä—É—Ç–∞
        /// </summary>
        public double CalculateForwardDistanceRecursively(
            List<GeoPoint> route, 
            GeoPoint stationCoords, 
            int segmentIndex, 
            double cumulativeDistance)
        {
            // –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∞
            if (segmentIndex >= route.Count - 1)
                return double.MaxValue;

            var segmentStart = route[segmentIndex];
            var segmentEnd = route[segmentIndex + 1];
            var segmentLength = GeoCalculator.CalculateHaversineDistance(segmentStart, segmentEnd);
            var distanceToSegment = GeoCalculator.DistanceFromPointToSegmentKm(stationCoords, segmentStart, segmentEnd);

            // –ï—Å–ª–∏ —Å—Ç–∞–Ω—Ü–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ –∫ —Ç–µ–∫—É—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
            if (distanceToSegment <= FuelPlanningConfig.SearchRadiusKm)
            {
                var projectionDistance = GeoCalculator.DistanceAlongSegment(segmentStart, segmentEnd, stationCoords);
                return cumulativeDistance + projectionDistance;
            }

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            return CalculateForwardDistanceRecursively(
                route, 
                stationCoords, 
                segmentIndex + 1, 
                cumulativeDistance + segmentLength);
        }

        private double GetCheapestFuelPrice(FuelStation station)
        {
            return station.FuelPrices
                .Where(fp => fp.PriceAfterDiscount > 0)
                .OrderBy(fp => fp.PriceAfterDiscount)
                .FirstOrDefault()?.PriceAfterDiscount ?? 0;
        }
    }

    public class RecursiveFuelPlanner : IRecursiveFuelPlanner
    {
        private readonly IStationSelector _stationSelector;
        private readonly IRefillCalculator _refillCalculator;

        public RecursiveFuelPlanner(
            IStationSelector stationSelector = null,
            IRefillCalculator refillCalculator = null)
        {
            _refillCalculator = refillCalculator ?? new SmartRefillCalculator();
            _stationSelector = stationSelector ?? new OptimalStationSelector(_refillCalculator);
        }

        /// <summary>
        /// –†–ï–ö–£–†–°–ò–Ø 2: –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫
        /// </summary>
        public List<FuelStopPlan> PlanStopsRecursively(List<StationInfo> stations, FuelPlanningContext context)
        {
            var initialState = new NewFuelState
            {
                RemainingFuel = context.CurrentFuelLiters,
                CurrentPosition = 0.0,
                UsedStationIds = new HashSet<Guid>()
            };

            return PlanStopsRecursivelyInternal(stations, context, initialState, new List<FuelStopPlan>());
        }

        /// <summary>
        /// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–æ–∫
        /// </summary>
        private List<FuelStopPlan> PlanStopsRecursivelyInternal(
            List<StationInfo> stations,
            FuelPlanningContext context,
            NewFuelState currentState,
            List<FuelStopPlan> currentPlan)
        {
            // –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π 1: –ú–æ–∂–µ–º –¥–æ–µ—Ö–∞—Ç—å –¥–æ —Ñ–∏–Ω–∏—à–∞
            if (CanReachFinish(currentState, context))
                return currentPlan;

            // –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π 2: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
            var availableStations = GetAvailableStations(stations, currentState, context);
            if (!availableStations.Any())
                return currentPlan;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–µ–π—á–∞—Å –∏–ª–∏ –º–æ–∂–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –¥–µ—à–µ–≤–ª–µ
            if (ShouldLookForCheaperOptions(currentState, context, availableStations))
            {
                // –ò—â–µ–º —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                var cheapestStation = availableStations.OrderBy(s => s.PricePerLiter).First();
                
                // –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é
                var selectedStation = _stationSelector.SelectOptimalStation(availableStations, currentState, context);
                if (selectedStation == null)
                    return currentPlan;

                // –°–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                var stop = CreateFuelStop(selectedStation, currentState, context, stations);
                var newPlan = new List<FuelStopPlan>(currentPlan) { stop };

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                var newState = UpdateState(currentState, selectedStation, stop);

                // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫
                return PlanStopsRecursivelyInternal(stations, context, newState, newPlan);
            }
            else
            {
                // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –∑–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
                var nearestStation = availableStations.OrderBy(s => s.ForwardDistanceKm - currentState.CurrentPosition).First();
                
                var stop = CreateFuelStop(nearestStation, currentState, context, stations);
                var newPlan = new List<FuelStopPlan>(currentPlan) { stop };
                var newState = UpdateState(currentState, nearestStation, stop);

                return PlanStopsRecursivelyInternal(stations, context, newState, newPlan);
            }
        }

        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∏—Å–∫–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—à–µ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        /// </summary>
        private bool ShouldLookForCheaperOptions(NewFuelState currentState, FuelPlanningContext context, List<StationInfo> availableStations)
        {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∞—Å —Ö–æ–¥–∞ —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–ø–ª–∏–≤–æ–º
            var remainingRange = currentState.RemainingFuel / context.FuelConsumptionPerKm;
            
            // –ï—Å–ª–∏ –º–æ–∂–µ–º –ø—Ä–æ–µ—Ö–∞—Ç—å –±–æ–ª—å—à–µ —á–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ + –±—É—Ñ–µ—Ä, —Ç–æ –∏—â–µ–º –¥–µ—à–µ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            var minRangeForOptimization = FuelPlanningConfig.MinStopDistanceKm * 1.2; // 480 –∫–º
            
            if (remainingRange > minRangeForOptimization)
            {
                return true; // –ú–æ–∂–µ–º –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ–∏—Å–∫ –¥–µ—à–µ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            }
            
            // –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–∞ –º–∞–ª–æ, –Ω–æ –µ—Å—Ç—å —Å—Ç–∞–Ω—Ü–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            var safeDistance = remainingRange * 0.8; // –û—Å—Ç–∞–≤–ª—è–µ–º 20% –∑–∞–ø–∞—Å
            var hasNearbyStation = availableStations.Any(s => 
                s.ForwardDistanceKm - currentState.CurrentPosition <= safeDistance);
            
            return hasNearbyStation; // –ú–æ–∂–µ–º –¥–æ–π—Ç–∏ –¥–æ —Å—Ç–∞–Ω—Ü–∏–∏ —Å –∑–∞–ø–∞—Å–æ–º
        }

        private bool CanReachFinish(NewFuelState state, FuelPlanningContext context)
        {
            var distanceToFinish = context.TotalDistanceKm - state.CurrentPosition;
            var fuelNeeded = distanceToFinish * context.FuelConsumptionPerKm + context.FinishFuel;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (5%) —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∏—Å–∫–∞
            var safetyBuffer = context.TankCapacity * 0.05;
            return state.RemainingFuel >= fuelNeeded + safetyBuffer;
        }

        private List<StationInfo> GetAvailableStations(
            List<StationInfo> stations,
            NewFuelState currentState, 
            FuelPlanningContext context)
        {
            return stations
                .Where(s => s.Station != null &&
                           !currentState.UsedStationIds.Contains(s.Station.Id) &&
                           s.ForwardDistanceKm > currentState.CurrentPosition &&
                           CanReachStationWithReserve(s, currentState, context) &&
                           // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
                           (currentState.CurrentPosition == 0.0 || 
                            s.ForwardDistanceKm - currentState.CurrentPosition >= FuelPlanningConfig.MinStopDistanceKm))
                .ToList();
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ–º –ª–∏ –¥–æ–µ—Ö–∞—Ç—å –¥–æ —Å—Ç–∞–Ω—Ü–∏–∏ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º 20% –∑–∞–ø–∞—Å–∞
        /// </summary>
        private bool CanReachStationWithReserve(StationInfo station, NewFuelState currentState, FuelPlanningContext context)
        {
            var distanceToStation = station.ForwardDistanceKm - currentState.CurrentPosition;
            var fuelUsedToStation = distanceToStation * context.FuelConsumptionPerKm;
            var fuelAtArrival = currentState.RemainingFuel - fuelUsedToStation;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ –ø—Ä–∏–±—ã—Ç–∏–∏ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é –≤ –±–∞–∫–µ –±—É–¥–µ—Ç –Ω–µ –º–µ–Ω—å—à–µ 20%
            var minimumReserve = context.TankCapacity * FuelPlanningConfig.MinReserveFactor;
            
            return fuelAtArrival >= minimumReserve;
        }

        private FuelStopPlan CreateFuelStop(
            StationInfo station,
            NewFuelState currentState,
            FuelPlanningContext context,
            List<StationInfo> allStations)
        {
            var distanceToStation = station.ForwardDistanceKm - currentState.CurrentPosition;
            var fuelUsed = distanceToStation * context.FuelConsumptionPerKm;
            var fuelAtArrival = currentState.RemainingFuel - fuelUsed;

            // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è 20% –∑–∞–ø–∞—Å
            var minimumReserve = context.TankCapacity * FuelPlanningConfig.MinReserveFactor;
            var reservePercentage = (fuelAtArrival / context.TankCapacity) * 100;
            
            if (fuelAtArrival < minimumReserve)
            {
                // –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ - –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å!
                throw new InvalidOperationException(
                    $"–ù–ê–†–£–®–ï–ù–ò–ï 20% –ó–ê–ü–ê–°–ê! –ü—Ä–∏ –ø—Ä–∏–±—ã—Ç–∏–∏ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é '{station.Station?.ProviderName}' " +
                    $"–≤ –±–∞–∫–µ –±—É–¥–µ—Ç {fuelAtArrival:F1}–ª ({reservePercentage:F1}%) " +
                    $"< {minimumReserve:F1}–ª (20%). " +
                    $"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distanceToStation:F1}–∫–º, –†–∞—Å—Ö–æ–¥: {fuelUsed:F1}–ª");
            }

            var refillAmount = _refillCalculator.CalculateOptimalRefill(
                station, currentState, context, allStations);

            return new FuelStopPlan
            {
                Station = station.Station!,
                StopAtKm = station.ForwardDistanceKm,
                RefillLiters = refillAmount,
                CurrentFuelLiters = fuelAtArrival,
                RoadSectionId = context.RoadSectionId
            };
        }

        private NewFuelState UpdateState(NewFuelState currentState, StationInfo selectedStation, FuelStopPlan stop)
        {
            return new NewFuelState
            {
                RemainingFuel = stop.CurrentFuelLiters + stop.RefillLiters,
                CurrentPosition = selectedStation.ForwardDistanceKm,
                UsedStationIds = new HashSet<Guid>(currentState.UsedStationIds) 
                { 
                    selectedStation.Station!.Id 
                }
            };
        }
    }

    public class OptimalStationSelector : IStationSelector
    {
        private readonly IRefillCalculator _refillCalculator;

        public OptimalStationSelector(IRefillCalculator refillCalculator = null)
        {
            _refillCalculator = refillCalculator ?? new SmartRefillCalculator();
        }

        /// <summary>
        /// –†–ï–ö–£–†–°–ò–Ø 3: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–∞–≤–∫–∏
        /// </summary>
        public StationInfo? SelectOptimalStation(
            List<StationInfo> candidates,
            NewFuelState currentState, 
            FuelPlanningContext context)
        {
            if (!candidates.Any())
                return null;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∑–∞–ø–∞—Å —Ö–æ–¥–∞
            var remainingRange = currentState.RemainingFuel / context.FuelConsumptionPerKm;
            
            // –ï—Å–ª–∏ –º–æ–∂–µ–º –ø—Ä–æ–µ—Ö–∞—Ç—å –¥–∞–ª–µ–∫–æ, –∏—â–µ–º —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é
            if (remainingRange > FuelPlanningConfig.MinStopDistanceKm * 1.5)
            {
                return candidates.OrderBy(s => s.PricePerLiter).First();
            }
            
            // –î–ª—è –ø–µ—Ä–≤–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
            if (currentState.CurrentPosition == 0.0)
                return SelectFirstStationRecursively(candidates, 0, currentState, context);

            // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏—â–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∑–∞–ø—Ä–∞–≤–∫–∏
            return SelectCheapestByTotalCostRecursively(candidates, 0, null, double.MaxValue, currentState, context);
        }

        /// <summary>
        /// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ (–∏—â–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∑–∞–ø—Ä–∞–≤–∫–∏)
        /// </summary>
        private StationInfo? SelectFirstStationRecursively(
            List<StationInfo> candidates, 
            int index, 
            NewFuelState currentState, 
            FuelPlanningContext context)
        {
            // –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
            if (index >= candidates.Count)
                return null;

            var current = candidates[index];
            var next = SelectFirstStationRecursively(candidates, index + 1, currentState, context);

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
            var currentTotalCost = CalculateTotalRefillCost(current, currentState, context);
            
            if (next == null)
                return current;

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
            var nextTotalCost = CalculateTotalRefillCost(next, currentState, context);

            // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
            return currentTotalCost <= nextTotalCost ? current : next;
        }

        /// <summary>
        /// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∑–∞–ø—Ä–∞–≤–∫–∏
        /// </summary>
        private StationInfo? SelectCheapestByTotalCostRecursively(
            List<StationInfo> candidates, 
            int index, 
            StationInfo? currentBest, 
            double bestTotalCost,
            NewFuelState currentState,
            FuelPlanningContext context)
        {
            // –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
            if (index >= candidates.Count)
                return currentBest;

            var candidate = candidates[index];
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            var candidateTotalCost = CalculateTotalRefillCost(candidate, currentState, context);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω—Ü–∏—é —Å –º–µ–Ω—å—à–µ–π –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
            if (candidateTotalCost < bestTotalCost)
            {
                return SelectCheapestByTotalCostRecursively(
                    candidates, index + 1, candidate, candidateTotalCost, currentState, context);
            }

            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ —Å —Ç–µ–∫—É—â–∏–º –ª—É—á—à–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
            return SelectCheapestByTotalCostRecursively(
                candidates, index + 1, currentBest, bestTotalCost, currentState, context);
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ (—Ü–µ–Ω–∞ √ó –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤)
        /// </summary>
        private double CalculateTotalRefillCost(
            StationInfo station, 
            NewFuelState currentState, 
            FuelPlanningContext context)
        {
            // –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏ –Ω—É–∂–Ω—ã –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            var allAvailableStations = GetAllFutureStations(station, currentState, context);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏
            var refillAmount = _refillCalculator.CalculateOptimalRefill(
                station, currentState, context, allAvailableStations);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä √ó –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤)
            return station.PricePerLiter * refillAmount;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏
        /// </summary>
        private List<StationInfo> GetAllFutureStations(StationInfo currentStation, NewFuelState currentState, FuelPlanningContext context)
        {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            var futureStations = new List<StationInfo> { currentStation };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö" —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            // —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ —á—Ç–æ–±—ã –∞–ª–≥–æ—Ä–∏—Ç–º –º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ
            var averagePrice = currentStation.PricePerLiter;
            var cheaperPrice = averagePrice * 0.9; // –ù–∞ 10% –¥–µ—à–µ–≤–ª–µ
            var expensivePrice = averagePrice * 1.1; // –ù–∞ 10% –¥–æ—Ä–æ–∂–µ
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é
            futureStations.Add(new StationInfo
            {
                ForwardDistanceKm = currentStation.ForwardDistanceKm + FuelPlanningConfig.MinStopDistanceKm,
                PricePerLiter = cheaperPrice,
                Station = null // –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è
            });
            
            return futureStations;
        }
    }

    public class SmartRefillCalculator : IRefillCalculator
    {

        public double CalculateOptimalRefill(
            StationInfo station,
            NewFuelState currentState,
            FuelPlanningContext context,
            List<StationInfo> allStations)
        {
            var distanceToStation = station.ForwardDistanceKm - currentState.CurrentPosition;
            var fuelUsed = distanceToStation * context.FuelConsumptionPerKm;
            var fuelAtArrival = currentState.RemainingFuel - fuelUsed;

            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–æ–∑–º–æ–∂–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –∑–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è –¥–ª—è —Ñ–∏–Ω–∏—à–∞
            if (IsLastPossibleStop(station, context, allStations))
                return CalculateRefillForFinish(fuelAtArrival, station, context);

            // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
            var nextCheaperStation = FindNextCheaperStationRecursively(
                allStations, station, 0, context, currentState);

            if (nextCheaperStation != null)
            {
                // –ó–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–ª—è –¥–æ–µ–∑–¥–∞ –¥–æ –±–æ–ª–µ–µ –¥–µ—à–µ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
                return CalculateMinimalRefillToNextStation(
                    fuelAtArrival, station, nextCheaperStation, context);
            }

            // –ó–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è –¥–æ –ø–æ–ª–Ω–æ–≥–æ –±–∞–∫–∞
            return Math.Max(context.TankCapacity - fuelAtArrival, FuelPlanningConfig.MinRefillLiters);
        }

        /// <summary>
        /// –†–ï–ö–£–†–°–ò–Ø 4: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ —Å –º–µ–Ω—å—à–µ–π –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∑–∞–ø—Ä–∞–≤–∫–∏
        /// </summary>
        private StationInfo? FindNextCheaperStationRecursively(
            List<StationInfo> allStations,
            StationInfo currentStation,
            int index,
            FuelPlanningContext context,
            NewFuelState currentState)
        {
            // –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏
            if (index >= allStations.Count)
                return null;

            var candidate = allStations[index];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            if (IsValidNextStation(candidate, currentStation, context))
            {
                var remaining = FindNextCheaperStationRecursively(
                    allStations, currentStation, index + 1, context, currentState);

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                var candidateTotalCost = CalculateTotalRefillCostForStation(candidate, currentStation, context);
                
                if (remaining == null)
                    return candidate;

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–∞–≤–∫–∏ –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–π—Å—è –ª—É—á—à–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
                var remainingTotalCost = CalculateTotalRefillCostForStation(remaining, currentStation, context);

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é —Å –º–µ–Ω—å—à–µ–π –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
                return candidateTotalCost <= remainingTotalCost ? candidate : remaining;
            }

            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
            return FindNextCheaperStationRecursively(
                allStations, currentStation, index + 1, context, currentState);
        }

        private bool IsValidNextStation(
            StationInfo candidate,
            StationInfo currentStation,
            FuelPlanningContext context)
        {
            // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∞–ª—å—à–µ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
            if (candidate.ForwardDistanceKm <= currentStation.ForwardDistanceKm)
                return false;

            // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç–∏ —Å –ø–æ–ª–Ω—ã–º –±–∞–∫–æ–º
            var maxRange = context.TankCapacity / context.FuelConsumptionPerKm;
            if (candidate.ForwardDistanceKm > currentStation.ForwardDistanceKm + maxRange)
                return false;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            var distanceBetweenStations = candidate.ForwardDistanceKm - currentStation.ForwardDistanceKm;
            if (distanceBetweenStations < FuelPlanningConfig.MinStopDistanceKm)
                return false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–∞–≤–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
            var candidateTotalCost = CalculateTotalRefillCostForStation(candidate, currentStation, context);
            var currentTotalCost = CalculateTotalRefillCostForStation(currentStation, currentStation, context);
            
            return candidateTotalCost < currentTotalCost;
        }

        private bool IsLastPossibleStop(
            StationInfo station,
            FuelPlanningContext context,
            List<StationInfo> allStations)
        {
            var maxRange = context.TankCapacity / context.FuelConsumptionPerKm;
            var maxReach = station.ForwardDistanceKm + maxRange;

            return !allStations.Any(s => 
                s.ForwardDistanceKm > station.ForwardDistanceKm && 
                s.ForwardDistanceKm <= maxReach);
        }

        private double CalculateRefillForFinish(
            double fuelAtArrival,
            StationInfo station,
            FuelPlanningContext context)
        {
            var distanceToFinish = context.TotalDistanceKm - station.ForwardDistanceKm;
            var fuelNeededToFinish = distanceToFinish * context.FuelConsumptionPerKm;
            var requiredRefill = fuelNeededToFinish + context.FinishFuel - fuelAtArrival;

            return Math.Max(Math.Min(requiredRefill, context.TankCapacity - fuelAtArrival), 0);
        }

        private double CalculateMinimalRefillToNextStation(
            double fuelAtArrival,
            StationInfo currentStation,
            StationInfo nextStation,
            FuelPlanningContext context)
        {
            var distanceToNext = nextStation.ForwardDistanceKm - currentStation.ForwardDistanceKm;
            var fuelNeededToNext = distanceToNext * context.FuelConsumptionPerKm;
            var minReserve = context.TankCapacity * FuelPlanningConfig.MinReserveFactor;
            var requiredRefill = fuelNeededToNext + minReserve - fuelAtArrival;

            var maxRefill = context.TankCapacity - fuelAtArrival;
            var refill = Math.Min(Math.Max(requiredRefill, FuelPlanningConfig.MinRefillLiters), maxRefill);

            return Math.Max(refill, 0);
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        /// </summary>
        private double CalculateTotalRefillCostForStation(
            StationInfo station,
            StationInfo currentStation,
            FuelPlanningContext context)
        {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–æ–ø–ª–∏–≤–æ –¥–æ —Å—Ç–∞–Ω—Ü–∏–∏
            var distanceToStation = station.ForwardDistanceKm - currentStation.ForwardDistanceKm;
            var fuelUsed = distanceToStation * context.FuelConsumptionPerKm;
            
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø—Ä–∏–µ—Ö–∞–ª–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç–∞–Ω—Ü–∏—é —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–ø–ª–∏–≤–∞
            // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º 50% –±–∞–∫–∞ –∫–∞–∫ –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            var fuelAtCurrentStation = context.TankCapacity * 0.5;
            var fuelAtCandidateStation = fuelAtCurrentStation - fuelUsed;

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –¥–æ–∑–∞–ø—Ä–∞–≤–∫—É –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
            var refillAmount = CalculateOptimalRefillForCandidate(
                fuelAtCandidateStation, station, context);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            return station.PricePerLiter * refillAmount;
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        /// </summary>
        private double CalculateOptimalRefillForCandidate(
            double fuelAtArrival,
            StationInfo station,
            FuelPlanningContext context)
        {
            // –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∑–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è –¥–æ –º–∏–Ω–∏–º—É–º–∞ –∏–ª–∏ –ø–æ–ª–Ω–æ–≥–æ –±–∞–∫–∞
            if (fuelAtArrival < context.TankCapacity * FuelPlanningConfig.MinReserveFactor)
            {
                var refillToMinReserve = context.TankCapacity * FuelPlanningConfig.MinReserveFactor - fuelAtArrival;
                return Math.Max(refillToMinReserve, FuelPlanningConfig.MinRefillLiters);
            }

            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
            // –ó–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –∏–ª–∏ –¥–æ –ø–æ–ª–Ω–æ–≥–æ –±–∞–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
            var distanceToFinish = context.TotalDistanceKm - station.ForwardDistanceKm;
            var fuelNeededToFinish = distanceToFinish * context.FuelConsumptionPerKm + context.FinishFuel;
            
            if (fuelAtArrival >= fuelNeededToFinish)
            {
                // –¢–æ–ø–ª–∏–≤–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ —Ñ–∏–Ω–∏—à–∞, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∞
                return FuelPlanningConfig.MinRefillLiters;
            }
            else
            {
                // –ù—É–∂–Ω–æ –¥–æ–∑–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è –¥–ª—è —Ñ–∏–Ω–∏—à–∞
                var requiredRefill = fuelNeededToFinish - fuelAtArrival;
                var maxRefill = context.TankCapacity - fuelAtArrival;
                return Math.Min(Math.Max(requiredRefill, FuelPlanningConfig.MinRefillLiters), maxRefill);
            }
        }
    }

    #endregion

    #region Data Classes

    /// <summary>
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
    /// </summary>
    public static class FuelPlanningConfig
    {
        /// <summary>
        /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–∞–≤–∫–∞–º–∏ (400 –∫–º)
        /// </summary>
        public const double MinStopDistanceKm = 400.0;
        
        /// <summary>
        /// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å —Ç–æ–ø–ª–∏–≤–∞ (20% –æ—Ç –±–∞–∫–∞)
        /// </summary>
        public const double MinReserveFactor = 0.20;
        
        /// <summary>
        /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏ (20 –ª–∏—Ç—Ä–æ–≤)
        /// </summary>
        public const double MinRefillLiters = 20.0;
        
        /// <summary>
        /// –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∑–∞–ø—Ä–∞–≤–æ–∫ –≤–¥–æ–ª—å –º–∞—Ä—à—Ä—É—Ç–∞ (9 –∫–º)
        /// </summary>
        public const double SearchRadiusKm = 9.0;
    }

    public class FuelPlanningContext
    {
        public List<GeoPoint> Route { get; set; } = new();
        public double TotalDistanceKm { get; set; }
        public double FuelConsumptionPerKm { get; set; }
        public double CurrentFuelLiters { get; set; }
        public double TankCapacity { get; set; }
        public double FinishFuel { get; set; }
        public List<RequiredStationDto> RequiredStops { get; set; } = new();
        public string RoadSectionId { get; set; } = string.Empty;
    }

    public class NewFuelState
    {
        public double RemainingFuel { get; set; }
        public double CurrentPosition { get; set; }
        public HashSet<Guid> UsedStationIds { get; set; } = new();
    }

    #endregion
}
