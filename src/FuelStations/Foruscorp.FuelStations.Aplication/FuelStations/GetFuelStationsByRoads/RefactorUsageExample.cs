//using Foruscorp.FuelStations.Domain.FuelStations;
//using System;
//using System.Collections.Generic;
//using System.Linq;

//namespace Foruscorp.FuelStations.Aplication.FuelStations.GetFuelStationsByRoads
//{
//    /// <summary>
//    /// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
//    /// </summary>
//    public class RefactorUsageExample
//    {
//        public static void DemonstrateRefactoredPlanner()
//        {
//            Console.WriteLine("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ===");
//            Console.WriteLine();

//            // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
//            var planner = new RefactoredFuelStopStationPlanner();

//            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
//            var route = CreateTestRoute();
//            var stations = CreateTestStations();

//            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
//            var totalDistance = 1500.0; // –∫–º
//            var fuelConsumption = 0.08;  // –ª/–∫–º (8–ª/100–∫–º)
//            var currentFuel = 60.0;      // –ª
//            var tankCapacity = 200.0;    // –ª
//            var finishFuel = 40.0;       // –ª
//            var requiredStops = new List<RequiredStationDto>();

//            Console.WriteLine("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ä—à—Ä—É—Ç–∞:");
//            Console.WriteLine($"   –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {totalDistance} –∫–º");
//            Console.WriteLine($"   –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {fuelConsumption * 100} –ª/100–∫–º");
//            Console.WriteLine($"   –¢–µ–∫—É—â–µ–µ —Ç–æ–ø–ª–∏–≤–æ: {currentFuel} –ª");
//            Console.WriteLine($"   –ï–º–∫–æ—Å—Ç—å –±–∞–∫–∞: {tankCapacity} –ª");
//            Console.WriteLine($"   –¢—Ä–µ–±—É–µ–º–æ–µ —Ç–æ–ø–ª–∏–≤–æ –Ω–∞ —Ñ–∏–Ω–∏—à–µ: {finishFuel} –ª");
//            Console.WriteLine($"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–∞–≤–æ–∫: {stations.Count}");
//            Console.WriteLine();

//            try
//            {
//                // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
//                var startTime = DateTime.Now;
//                var result = planner.PlanStopsByStations(
//                    route, stations, totalDistance, fuelConsumption,
//                    currentFuel, tankCapacity, requiredStops, finishFuel);
//                var endTime = DateTime.Now;

//                // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
//                Console.WriteLine("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
//                Console.WriteLine($"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(endTime - startTime).TotalMilliseconds:F2} –º—Å");
//                Console.WriteLine();

//                if (result.StopPlan.Any())
//                {
//                    Console.WriteLine("üõë –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:");
//                    var totalCost = 0.0;

//                    for (int i = 0; i < result.StopPlan.Count; i++)
//                    {
//                        var stop = result.StopPlan[i];
//                        var cost = stop.RefillLiters * GetStationPrice(stop.Station);
//                        totalCost += cost;

//                        Console.WriteLine($"   {i + 1}. {stop.Station.ProviderName}");
//                        Console.WriteLine($"      üìç –ü–æ–∑–∏—Ü–∏—è: {stop.StopAtKm:F1} –∫–º");
//                        Console.WriteLine($"      ‚õΩ –¢–æ–ø–ª–∏–≤–æ –ø—Ä–∏ –ø—Ä–∏–±—ã—Ç–∏–∏: {stop.CurrentFuelLiters:F1} –ª");
//                        Console.WriteLine($"      üîÑ –î–æ–∑–∞–ø—Ä–∞–≤–∫–∞: {stop.RefillLiters:F1} –ª");
//                        Console.WriteLine($"      üí∞ –¶–µ–Ω–∞: ${GetStationPrice(stop.Station):F2}/–ª");
//                        Console.WriteLine($"      üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:F2}");
//                        Console.WriteLine();
//                    }

//                    Console.WriteLine($"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞: ${totalCost:F2}");
//                }
//                else
//                {
//                    Console.WriteLine("üöó –û—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è - –º–æ–∂–Ω–æ –¥–æ–µ—Ö–∞—Ç—å –±–µ–∑ –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏!");
//                }

//                Console.WriteLine($"üèÅ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ: {result.Finish.RemainingFuelLiters:F1} –ª");
//                Console.WriteLine();

//                // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
//                DemonstrateRecursiveComponents();
//            }
//            catch (Exception ex)
//            {
//                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {ex.Message}");
//            }
//        }

//        private static void DemonstrateRecursiveComponents()
//        {
//            Console.WriteLine("üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:");
//            Console.WriteLine();

//            // 1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞
//            Console.WriteLine("1Ô∏è‚É£  –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞ (RouteAnalyzer):");
//            var analyzer = new RouteAnalyzer();
//            var route = CreateTestRoute();
//            var stations = CreateTestStations();
            
//            var stationInfos = analyzer.AnalyzeStations(route, stations, 1500.0);
//            Console.WriteLine($"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {stations.Count} —Å—Ç–∞–Ω—Ü–∏–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ");
//            Console.WriteLine($"   üìä –ù–∞–π–¥–µ–Ω–æ {stationInfos.Count} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π");
//            Console.WriteLine();

//            // 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–π
//            Console.WriteLine("2Ô∏è‚É£  –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏:");
//            var selector = new OptimalStationSelector();
//            var context = CreateTestContext();
//            var state = new FuelState { CurrentPosition = 0.0, RemainingFuel = 60.0 };
            
//            var candidates = stationInfos.Take(5).ToList();
//            var selected = selector.SelectOptimalStation(candidates, state, context);
            
//            if (selected != null)
//            {
//                Console.WriteLine($"   üéØ –í—ã–±—Ä–∞–Ω–∞: {selected.Station?.ProviderName}");
//                Console.WriteLine($"   üí∞ –¶–µ–Ω–∞: ${selected.PricePerLiter:F2}/–ª");
//                Console.WriteLine($"   üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {selected.ForwardDistanceKm:F1} –∫–º");
//            }
//            Console.WriteLine();

//            // 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏
//            Console.WriteLine("3Ô∏è‚É£  –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏:");
//            var refillCalculator = new SmartRefillCalculator();
            
//            if (selected != null)
//            {
//                var refillAmount = refillCalculator.CalculateOptimalRefill(
//                    selected, state, context, stationInfos);
                
//                Console.WriteLine($"   ‚õΩ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∞: {refillAmount:F1} –ª");
                
//                var nextCheaper = FindNextCheaperStation(stationInfos, selected);
//                if (nextCheaper != null)
//                {
//                    Console.WriteLine($"   üîç –ù–∞–π–¥–µ–Ω–∞ –±–æ–ª–µ–µ –¥–µ—à–µ–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è: {nextCheaper.Station?.ProviderName}");
//                    Console.WriteLine($"   üí∞ –¶–µ–Ω–∞: ${nextCheaper.PricePerLiter:F2}/–ª (—ç–∫–æ–Ω–æ–º–∏—è ${selected.PricePerLiter - nextCheaper.PricePerLiter:F2}/–ª)");
//                }
//            }
//            Console.WriteLine();

//            Console.WriteLine("üß† –í—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∫—É—Ä—Å–∏—é –¥–ª—è:");
//            Console.WriteLine("   ‚Ä¢ –û–±—Ö–æ–¥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –º—É—Ç–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è");
//            Console.WriteLine("   ‚Ä¢ –≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–∑–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤");
//            Console.WriteLine("   ‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π");
//            Console.WriteLine("   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –∫–æ–¥–∞");
//        }

//        private static StationInfo? FindNextCheaperStation(List<StationInfo> stations, StationInfo current)
//        {
//            return stations
//                .Where(s => s.ForwardDistanceKm > current.ForwardDistanceKm && 
//                           s.PricePerLiter < current.PricePerLiter)
//                .OrderBy(s => s.PricePerLiter)
//                .FirstOrDefault();
//        }

//        private static List<GeoPoint> CreateTestRoute()
//        {
//            return new List<GeoPoint>
//            {
//                new GeoPoint(55.7558, 37.6176), // –ú–æ—Å–∫–≤–∞
//                new GeoPoint(55.8000, 37.8000), // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ 1
//                new GeoPoint(56.0000, 38.0000), // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ 2
//                new GeoPoint(56.2000, 38.2000), // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ 3
//                new GeoPoint(59.9311, 30.3609)  // –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
//            };
//        }

//        private static List<FuelStation> CreateTestStations()
//        {
//            return new List<FuelStation>
//            {
//                new FuelStation
//                {
//                    Id = Guid.NewGuid(),
//                    ProviderName = "–õ—É–∫–æ–π–ª (–±–ª–∏–∑–∫–æ, –¥–æ—Ä–æ–≥–æ)",
//                    Coordinates = new GeoPoint(55.7600, 37.6200),
//                    FuelPrices = new List<FuelPrice>
//                    {
//                        new FuelPrice { Price = 3.85, PriceAfterDiscount = 3.85 }
//                    }
//                },
//                new FuelStation
//                {
//                    Id = Guid.NewGuid(),
//                    ProviderName = "Shell (—Å—Ä–µ–¥–Ω–µ)",
//                    Coordinates = new GeoPoint(55.8100, 37.8100),
//                    FuelPrices = new List<FuelPrice>
//                    {
//                        new FuelPrice { Price = 3.45, PriceAfterDiscount = 3.45 }
//                    }
//                },
//                new FuelStation
//                {
//                    Id = Guid.NewGuid(),
//                    ProviderName = "–¢–∞—Ç–Ω–µ—Ñ—Ç—å (–¥–µ—à–µ–≤–æ)",
//                    Coordinates = new GeoPoint(56.0100, 38.0100),
//                    FuelPrices = new List<FuelPrice>
//                    {
//                        new FuelPrice { Price = 3.15, PriceAfterDiscount = 3.15 }
//                    }
//                },
//                new FuelStation
//                {
//                    Id = Guid.NewGuid(),
//                    ProviderName = "–†–æ—Å–Ω–µ—Ñ—Ç—å (–æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ)",
//                    Coordinates = new GeoPoint(56.2100, 38.2100),
//                    FuelPrices = new List<FuelPrice>
//                    {
//                        new FuelPrice { Price = 2.95, PriceAfterDiscount = 2.95 }
//                    }
//                },
//                new FuelStation
//                {
//                    Id = Guid.NewGuid(),
//                    ProviderName = "–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å (—Ñ–∏–Ω–∏—à)",
//                    Coordinates = new GeoPoint(59.9400, 30.3700),
//                    FuelPrices = new List<FuelPrice>
//                    {
//                        new FuelPrice { Price = 3.25, PriceAfterDiscount = 3.25 }
//                    }
//                }
//            };
//        }

//        private static FuelPlanningContext CreateTestContext()
//        {
//            return new FuelPlanningContext
//            {
//                TotalDistanceKm = 1500.0,
//                FuelConsumptionPerKm = 0.08,
//                CurrentFuelLiters = 60.0,
//                TankCapacity = 200.0,
//                FinishFuel = 40.0,
//                RoadSectionId = "moscow-spb-route"
//            };
//        }

//        private static double GetStationPrice(FuelStation station)
//        {
//            return station.FuelPrices
//                .Where(fp => fp.PriceAfterDiscount > 0)
//                .OrderBy(fp => fp.PriceAfterDiscount)
//                .FirstOrDefault()?.PriceAfterDiscount ?? 0;
//        }
//    }

//    /// <summary>
//    /// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//    /// </summary>
//    public class PerformanceBenchmark
//    {
//        public static void ComparePerformance()
//        {
//            Console.WriteLine("‚ö° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:");
//            Console.WriteLine();

//            var route = RefactorUsageExample.CreateTestRoute();
//            var stations = RefactorUsageExample.CreateTestStations();

//            // –¢–µ—Å—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
//            var refactoredPlanner = new RefactoredFuelStopStationPlanner();
            
//            var times = new List<double>();
//            for (int i = 0; i < 10; i++)
//            {
//                var start = DateTime.Now;
//                var result = refactoredPlanner.PlanStopsByStations(
//                    route, stations, 1500.0, 0.08, 60.0, 200.0, 
//                    new List<RequiredStationDto>(), 40.0);
//                var end = DateTime.Now;
                
//                times.Add((end - start).TotalMilliseconds);
//            }

//            var avgTime = times.Average();
//            var minTime = times.Min();
//            var maxTime = times.Max();

//            Console.WriteLine($"üöÄ –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:");
//            Console.WriteLine($"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avgTime:F2} –º—Å");
//            Console.WriteLine($"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {minTime:F2} –º—Å");
//            Console.WriteLine($"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {maxTime:F2} –º—Å");
//            Console.WriteLine();

//            Console.WriteLine("üìà –£–ª—É—á—à–µ–Ω–∏—è:");
//            Console.WriteLine("   ‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");
//            Console.WriteLine("   ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏");
//            Console.WriteLine("   ‚Ä¢ –õ–∏–Ω–µ–π–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π");
//            Console.WriteLine("   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è");
//        }
//    }
//}
