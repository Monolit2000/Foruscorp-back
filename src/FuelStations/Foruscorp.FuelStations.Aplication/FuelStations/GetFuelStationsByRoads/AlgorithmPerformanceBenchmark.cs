//using Foruscorp.FuelStations.Domain.FuelStations;
//using System;
//using System.Collections.Generic;
//using System.Diagnostics;
//using System.Linq;

//namespace Foruscorp.FuelStations.Aplication.FuelStations.GetFuelStationsByRoads
//{
//    /// <summary>
//    /// –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
//    /// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç ComprehensiveChainOptimizer vs DijkstraFuelOptimizer
//    /// </summary>
//    public class AlgorithmPerformanceBenchmark
//    {
//        private readonly ComprehensiveChainOptimizer _comprehensiveOptimizer;
//        private readonly DijkstraFuelOptimizer _dijkstraOptimizer;

//        public AlgorithmPerformanceBenchmark()
//        {
//            _comprehensiveOptimizer = new ComprehensiveChainOptimizer();
//            _dijkstraOptimizer = new DijkstraFuelOptimizer();
//        }

//        /// <summary>
//        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//        /// </summary>
//        public BenchmarkResults RunFullBenchmark(
//            List<GeoPoint> route,
//            List<FuelStation> stations,
//            double totalDistanceKm,
//            double fuelConsumptionPerKm,
//            double currentFuelLiters,
//            double tankCapacity,
//            List<RequiredStationDto> requiredStops,
//            double finishFuel)
//        {
//            Console.WriteLine($"üöÄ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –¥–ª—è {stations.Count} —Å—Ç–∞–Ω—Ü–∏–π...");
//            Console.WriteLine($"üìè –ú–∞—Ä—à—Ä—É—Ç: {totalDistanceKm:F0}–∫–º, –¢–æ–ø–ª–∏–≤–æ: {currentFuelLiters:F0}–ª/{tankCapacity:F0}–ª");
//            Console.WriteLine();

//            var results = new BenchmarkResults
//            {
//                StationCount = stations.Count,
//                RouteDistance = totalDistanceKm
//            };

//            // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º Comprehensive –∞–ª–≥–æ—Ä–∏—Ç–º
//            Console.WriteLine("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ComprehensiveChainOptimizer...");
//            results.ComprehensiveResult = BenchmarkAlgorithm(
//                () => _comprehensiveOptimizer.FindOptimalChainComprehensive(
//                    route, stations, totalDistanceKm, fuelConsumptionPerKm,
//                    currentFuelLiters, tankCapacity, requiredStops, finishFuel),
//                "Comprehensive");

//            // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º Dijkstra –∞–ª–≥–æ—Ä–∏—Ç–º  
//            Console.WriteLine("üó∫Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DijkstraFuelOptimizer...");
//            results.DijkstraResult = BenchmarkAlgorithm(
//                () => _dijkstraOptimizer.FindOptimalRoute(
//                    route, stations, totalDistanceKm, fuelConsumptionPerKm,
//                    currentFuelLiters, tankCapacity, requiredStops, finishFuel),
//                "Dijkstra");

//            // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
//            AnalyzeResults(results);

//            return results;
//        }

//        /// <summary>
//        /// –ë–µ–Ω—á–º–∞—Ä–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
//        /// </summary>
//        private AlgorithmResult BenchmarkAlgorithm(Func<StopPlanInfo> algorithm, string algorithmName)
//        {
//            var stopwatch = Stopwatch.StartNew();
//            var memoryBefore = GC.GetTotalMemory(false);

//            StopPlanInfo result = null;
//            Exception error = null;

//            try
//            {
//                result = algorithm();
//            }
//            catch (Exception ex)
//            {
//                error = ex;
//                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ {algorithmName}: {ex.Message}");
//            }

//            stopwatch.Stop();
//            var memoryAfter = GC.GetTotalMemory(false);

//            var algorithmResult = new AlgorithmResult
//            {
//                AlgorithmName = algorithmName,
//                ExecutionTimeMs = stopwatch.ElapsedMilliseconds,
//                MemoryUsedBytes = memoryAfter - memoryBefore,
//                Success = result != null && error == null,
//                Error = error?.Message,
//                StopPlan = result
//            };

//            if (result != null)
//            {
//                algorithmResult.StopsCount = result.StopPlan.Count;
//                algorithmResult.TotalFuelCost = CalculateTotalCost(result);
//            }

//            Console.WriteLine($"‚è±Ô∏è {algorithmName}: {algorithmResult.ExecutionTimeMs}ms, " +
//                             $"–ü–∞–º—è—Ç—å: {algorithmResult.MemoryUsedBytes / 1024:F0}KB, " +
//                             $"–û—Å—Ç–∞–Ω–æ–≤–æ–∫: {algorithmResult.StopsCount}");

//            return algorithmResult;
//        }

//        /// <summary>
//        /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
//        /// </summary>
//        private void AnalyzeResults(BenchmarkResults results)
//        {
//            Console.WriteLine();
//            Console.WriteLine("üìà –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó");
//            Console.WriteLine("=" * 50);

//            var comp = results.ComprehensiveResult;
//            var dijkstra = results.DijkstraResult;

//            // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
//            Console.WriteLine($"‚è±Ô∏è –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:");
//            Console.WriteLine($"   ComprehensiveChainOptimizer: {comp.ExecutionTimeMs}ms");
//            Console.WriteLine($"   DijkstraFuelOptimizer:       {dijkstra.ExecutionTimeMs}ms");
            
//            if (comp.Success && dijkstra.Success)
//            {
//                var speedup = (double)comp.ExecutionTimeMs / dijkstra.ExecutionTimeMs;
//                Console.WriteLine($"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ Dijkstra: {speedup:F1}x");
//            }

//            // –ü–∞–º—è—Ç—å
//            Console.WriteLine($"\nüíæ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò:");
//            Console.WriteLine($"   ComprehensiveChainOptimizer: {comp.MemoryUsedBytes / 1024:F0}KB");
//            Console.WriteLine($"   DijkstraFuelOptimizer:       {dijkstra.MemoryUsedBytes / 1024:F0}KB");

//            // –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏—è
//            Console.WriteLine($"\nüí∞ –ö–ê–ß–ï–°–¢–í–û –†–ï–®–ï–ù–ò–Ø:");
//            if (comp.Success && dijkstra.Success)
//            {
//                Console.WriteLine($"   ComprehensiveChainOptimizer: {comp.StopsCount} –æ—Å—Ç–∞–Ω–æ–≤–æ–∫, ${comp.TotalFuelCost:F2}");
//                Console.WriteLine($"   DijkstraFuelOptimizer:       {dijkstra.StopsCount} –æ—Å—Ç–∞–Ω–æ–≤–æ–∫, ${dijkstra.TotalFuelCost:F2}");

//                var costDifference = dijkstra.TotalFuelCost - comp.TotalFuelCost;
//                var costDifferencePercent = (costDifference / comp.TotalFuelCost) * 100;
                
//                Console.WriteLine($"   üí° –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {costDifference:+F2;-F2}$ ({costDifferencePercent:+F1;-F1}%)");
//            }

//            // –°–ª–æ–∂–Ω–æ—Å—Ç—å
//            Console.WriteLine($"\nüßÆ –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨:");
//            Console.WriteLine($"   ComprehensiveChainOptimizer: O(min(1M, 16^k √ó k!)) –≥–¥–µ k‚â§10");
//            Console.WriteLine($"   DijkstraFuelOptimizer:       O((V + E) log V) –≥–¥–µ V‚âà4n, E‚âàn¬≤");

//            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
//            Console.WriteLine($"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
//            if (results.StationCount <= 20)
//            {
//                Console.WriteLine($"   ‚úÖ –î–ª—è {results.StationCount} —Å—Ç–∞–Ω—Ü–∏–π –æ–±–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã");
//                Console.WriteLine($"   üí° Dijkstra –±—ã—Å—Ç—Ä–µ–µ, Comprehensive —Ç–æ—á–Ω–µ–µ");
//            }
//            else if (results.StationCount <= 50)
//            {
//                Console.WriteLine($"   ‚ö†Ô∏è –î–ª—è {results.StationCount} —Å—Ç–∞–Ω—Ü–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Dijkstra");
//                Console.WriteLine($"   üöÄ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ —Å –ø—Ä–∏–µ–º–ª–µ–º—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º");
//            }
//            else
//            {
//                Console.WriteLine($"   üö® –î–ª—è {results.StationCount} —Å—Ç–∞–Ω—Ü–∏–π —Ç–æ–ª—å–∫–æ Dijkstra");
//                Console.WriteLine($"   ‚ùå Comprehensive –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–º");
//            }
//        }

//        /// <summary>
//        /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞
//        /// </summary>
//        private double CalculateTotalCost(StopPlanInfo stopPlan)
//        {
//            return stopPlan.StopPlan.Sum(stop => 
//            {
//                var price = stop.Station.FuelPrices
//                    .Where(fp => fp.PriceAfterDiscount > 0)
//                    .OrderBy(fp => fp.PriceAfterDiscount)
//                    .FirstOrDefault()?.PriceAfterDiscount ?? 0;
                    
//                return stop.RefillLiters * price;
//            });
//        }

//        /// <summary>
//        /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç–∞–Ω—Ü–∏–π
//        /// </summary>
//        public static BenchmarkResults RunStressTest(int stationCount)
//        {
//            var testData = GenerateTestData(stationCount);
//            var benchmark = new AlgorithmPerformanceBenchmark();
            
//            return benchmark.RunFullBenchmark(
//                testData.Route,
//                testData.Stations,
//                testData.TotalDistance,
//                testData.FuelConsumption,
//                testData.CurrentFuel,
//                testData.TankCapacity,
//                new List<RequiredStationDto>(),
//                testData.FinishFuel);
//        }

//        /// <summary>
//        /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
//        /// </summary>
//        private static TestData GenerateTestData(int stationCount)
//        {
//            var random = new Random(42); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
//            var totalDistance = 1000.0; // 1000–∫–º –º–∞—Ä—à—Ä—É—Ç
            
//            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç
//            var route = new List<GeoPoint>();
//            for (int i = 0; i <= 10; i++)
//            {
//                route.Add(new GeoPoint 
//                { 
//                    Latitude = 55.7558 + i * 0.1, 
//                    Longitude = 37.6176 + i * 0.1 
//                });
//            }

//            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω—Ü–∏–∏
//            var stations = new List<FuelStation>();
//            for (int i = 0; i < stationCount; i++)
//            {
//                var distance = random.NextDouble() * totalDistance;
//                var price = 1.40 + random.NextDouble() * 0.60; // $1.40-$2.00

//                stations.Add(new FuelStation
//                {
//                    Id = i + 1,
//                    ProviderName = $"Station_{i + 1}",
//                    Coordinates = new GeoPoint 
//                    { 
//                        Latitude = 55.7558 + (distance / 100), 
//                        Longitude = 37.6176 + (distance / 100) 
//                    },
//                    FuelPrices = new List<FuelPrice>
//                    {
//                        new FuelPrice { PriceAfterDiscount = price }
//                    }
//                });
//            }

//            return new TestData
//            {
//                Route = route,
//                Stations = stations,
//                TotalDistance = totalDistance,
//                FuelConsumption = 0.35, // 35–ª/100–∫–º
//                CurrentFuel = 60, // 60–ª –≤ –±–∞–∫–µ
//                TankCapacity = 200, // 200–ª –±–∞–∫
//                FinishFuel = 40 // 40–ª –Ω–∞ —Ñ–∏–Ω–∏—à–µ
//            };
//        }
//    }

//    #region Data Structures

//    /// <summary>
//    /// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞
//    /// </summary>
//    public class BenchmarkResults
//    {
//        public int StationCount { get; set; }
//        public double RouteDistance { get; set; }
//        public AlgorithmResult ComprehensiveResult { get; set; }
//        public AlgorithmResult DijkstraResult { get; set; }
//    }

//    /// <summary>
//    /// –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
//    /// </summary>
//    public class AlgorithmResult
//    {
//        public string AlgorithmName { get; set; }
//        public long ExecutionTimeMs { get; set; }
//        public long MemoryUsedBytes { get; set; }
//        public bool Success { get; set; }
//        public string Error { get; set; }
//        public int StopsCount { get; set; }
//        public double TotalFuelCost { get; set; }
//        public StopPlanInfo StopPlan { get; set; }
//    }

//    /// <summary>
//    /// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
//    /// </summary>
//    public class TestData
//    {
//        public List<GeoPoint> Route { get; set; }
//        public List<FuelStation> Stations { get; set; }
//        public double TotalDistance { get; set; }
//        public double FuelConsumption { get; set; }
//        public double CurrentFuel { get; set; }
//        public double TankCapacity { get; set; }
//        public double FinishFuel { get; set; }
//    }

//    #endregion
//}
