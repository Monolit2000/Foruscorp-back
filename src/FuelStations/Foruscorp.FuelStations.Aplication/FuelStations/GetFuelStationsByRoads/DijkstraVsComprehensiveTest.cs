//using System;
//using System.Collections.Generic;

//namespace Foruscorp.FuelStations.Aplication.FuelStations.GetFuelStationsByRoads
//{
//    /// <summary>
//    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ Dijkstra vs Comprehensive
//    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ—à–µ–Ω–∏–π
//    /// </summary>
//    public class DijkstraVsComprehensiveTest
//    {
//        /// <summary>
//        /// –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
//        /// </summary>
//        public static void RunComparisonTest()
//        {
//            Console.WriteLine("üß™ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–õ–ì–û–†–ò–¢–ú–û–í");
//            Console.WriteLine("=" * 60);
//            Console.WriteLine();

//            // –¢–µ—Å—Ç 1: –ú–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω—Ü–∏–π (5-15)
//            Console.WriteLine("üìä –¢–ï–°–¢ 1: –ú–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω—Ü–∏–π");
//            RunTestSeries(new[] { 5, 10, 15 });

//            Console.WriteLine();
//            Console.WriteLine("üìä –¢–ï–°–¢ 2: –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω—Ü–∏–π");
//            RunTestSeries(new[] { 20, 25, 30 });

//            Console.WriteLine();
//            Console.WriteLine("üìä –¢–ï–°–¢ 3: –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω—Ü–∏–π");
//            RunTestSeries(new[] { 40, 50, 60 });

//            Console.WriteLine();
//            Console.WriteLine("üéØ –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:");
//            Console.WriteLine("=" * 60);
//            Console.WriteLine("1. üìà Dijkstra: O((V + E) log V) - –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å");
//            Console.WriteLine("2. üîÑ Comprehensive: O(16^k √ó k!) - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å");
//            Console.WriteLine("3. üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ Dijkstra —Ä–∞—Å—Ç–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç–∞–Ω—Ü–∏–π");
//            Console.WriteLine("4. üí° –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π Dijkstra –±–ª–∏–∑–∫–æ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É");
//            Console.WriteLine("5. ‚ö° Dijkstra –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –¥–æ —Å–æ—Ç–µ–Ω —Å—Ç–∞–Ω—Ü–∏–π");
//            Console.WriteLine("6. üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Dijkstra –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á");
//        }

//        /// <summary>
//        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
//        /// </summary>
//        private static void RunTestSeries(int[] stationCounts)
//        {
//            foreach (var count in stationCounts)
//            {
//                Console.WriteLine($"  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {count} —Å—Ç–∞–Ω—Ü–∏–π:");
                
//                try
//                {
//                    var results = AlgorithmPerformanceBenchmark.RunStressTest(count);
//                    PrintCompactResults(results);
//                }
//                catch (Exception ex)
//                {
//                    Console.WriteLine($"    ‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
//                }
                
//                Console.WriteLine();
//            }
//        }

//        /// <summary>
//        /// –í—ã–≤–æ–¥–∏—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
//        /// </summary>
//        private static void PrintCompactResults(BenchmarkResults results)
//        {
//            var comp = results.ComprehensiveResult;
//            var dijkstra = results.DijkstraResult;

//            Console.WriteLine($"    ‚è±Ô∏è –í—Ä–µ–º—è:");
//            Console.WriteLine($"      Comprehensive: {comp.ExecutionTimeMs}ms");
//            Console.WriteLine($"      Dijkstra:      {dijkstra.ExecutionTimeMs}ms");
            
//            if (comp.Success && dijkstra.Success)
//            {
//                var speedup = (double)comp.ExecutionTimeMs / dijkstra.ExecutionTimeMs;
//                Console.WriteLine($"      üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ:  {speedup:F1}x");
                
//                Console.WriteLine($"    üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:");
//                Console.WriteLine($"      Comprehensive: ${comp.TotalFuelCost:F2}");
//                Console.WriteLine($"      Dijkstra:      ${dijkstra.TotalFuelCost:F2}");
                
//                var costDiff = dijkstra.TotalFuelCost - comp.TotalFuelCost;
//                var costDiffPercent = Math.Abs(costDiff / comp.TotalFuelCost * 100);
//                Console.WriteLine($"      üìä –†–∞–∑–Ω–∏—Ü–∞:    {costDiffPercent:F1}%");
//            }
//            else
//            {
//                Console.WriteLine($"    ‚ùå Comprehensive: {(comp.Success ? "OK" : "FAILED")}");
//                Console.WriteLine($"    ‚úÖ Dijkstra:      {(dijkstra.Success ? "OK" : "FAILED")}");
//            }
//        }

//        /// <summary>
//        /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
//        /// </summary>
//        public static void DemonstrateComplexity()
//        {
//            Console.WriteLine("üßÆ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–û–ô –°–õ–û–ñ–ù–û–°–¢–ò");
//            Console.WriteLine("=" * 60);
//            Console.WriteLine();

//            Console.WriteLine("üìä Theoretical Complexity Comparison:");
//            Console.WriteLine();
            
//            var stationCounts = new[] { 5, 10, 15, 20, 25, 30, 40, 50 };
            
//            Console.WriteLine("Stations | Comprehensive O(16^k√ók!) | Dijkstra O((V+E)logV) | Speedup");
//            Console.WriteLine("---------|--------------------------|----------------------|--------");
            
//            foreach (var n in stationCounts)
//            {
//                var comprehensiveOps = CalculateComprehensiveComplexity(n);
//                var dijkstraOps = CalculateDijkstraComplexity(n);
//                var speedup = comprehensiveOps / dijkstraOps;
                
//                Console.WriteLine($"{n,8} | {FormatLargeNumber(comprehensiveOps),24} | {FormatLargeNumber(dijkstraOps),20} | {speedup:F0}x");
//            }
            
//            Console.WriteLine();
//            Console.WriteLine("üí° –í—ã–≤–æ–¥—ã:");
//            Console.WriteLine("  ‚Ä¢ Dijkstra –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –ª–∏–Ω–µ–π–Ω–æ");
//            Console.WriteLine("  ‚Ä¢ Comprehensive —Ä–∞—Å—Ç–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ");
//            Console.WriteLine("  ‚Ä¢ –ü—Ä–∏ 50 —Å—Ç–∞–Ω—Ü–∏—è—Ö Dijkstra –≤ –º–∏–ª–ª–∏–æ–Ω—ã —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ");
//        }

//        /// <summary>
//        /// –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ Comprehensive –∞–ª–≥–æ—Ä–∏—Ç–º–∞
//        /// </summary>
//        private static double CalculateComprehensiveComplexity(int n)
//        {
//            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: min(1M, 16^k √ó k!) –≥–¥–µ k‚â§10
//            var k = Math.Min(n, 10);
//            var stationsPerStep = Math.Min(n, 16);
            
//            double operations = 0;
//            for (int len = 1; len <= k; len++)
//            {
//                var combinations = Combination(stationsPerStep, len);
//                var permutations = Factorial(len);
//                operations += combinations * permutations;
                
//                if (operations > 1000000) // –õ–∏–º–∏—Ç 1M
//                {
//                    operations = 1000000;
//                    break;
//                }
//            }
            
//            return operations;
//        }

//        /// <summary>
//        /// –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ Dijkstra –∞–ª–≥–æ—Ä–∏—Ç–º–∞
//        /// </summary>
//        private static double CalculateDijkstraComplexity(int n)
//        {
//            // O((V + E) log V) –≥–¥–µ V = 4n (—É–∑–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞–Ω—Ü–∏–∏), E ‚âà n¬≤
//            var V = 4 * n + 2; // 4 —É–∑–ª–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é + —Å—Ç–∞—Ä—Ç + —Ñ–∏–Ω–∏—à
//            var E = n * n; // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ n¬≤ —Ä—ë–±–µ—Ä
            
//            return (V + E) * Math.Log2(V);
//        }

//        /// <summary>
//        /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
//        /// </summary>
//        private static string FormatLargeNumber(double number)
//        {
//            if (number < 1000) return number.ToString("F0");
//            if (number < 1000000) return $"{number/1000:F1}K";
//            if (number < 1000000000) return $"{number/1000000:F1}M";
//            if (number < 1000000000000) return $"{number/1000000000:F1}B";
//            return $"{number/1000000000000:F1}T";
//        }

//        /// <summary>
//        /// –í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ—á–µ—Ç–∞–Ω–∏—è C(n,k)
//        /// </summary>
//        private static double Combination(int n, int k)
//        {
//            if (k > n) return 0;
//            if (k == 0 || k == n) return 1;
            
//            double result = 1;
//            for (int i = 1; i <= k; i++)
//            {
//                result = result * (n - i + 1) / i;
//            }
//            return result;
//        }

//        /// <summary>
//        /// –í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª
//        /// </summary>
//        private static double Factorial(int n)
//        {
//            if (n <= 1) return 1;
            
//            double result = 1;
//            for (int i = 2; i <= n; i++)
//            {
//                result *= i;
//            }
//            return result;
//        }
//    }
//}
