using Foruscorp.FuelStations.Domain.FuelStations;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Foruscorp.FuelStations.Aplication.FuelStations.GetFuelStationsByRoads
{
    /// <summary>
    /// –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–∞–ø—Ä–∞–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –î–µ–π–∫—Å—Ç—Ä—ã
    /// –°–ª–æ–∂–Ω–æ—Å—Ç—å: O((V + E) log V) –≥–¥–µ V = —É–∑–ª—ã, E = —Ä—ë–±—Ä–∞
    /// –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä–∞ O(2^n √ó n!)
    /// </summary>
    public class DijkstraFuelOptimizer
    {
        private readonly IChainCostCalculator _costCalculator;
        private readonly IChainValidator _validator;
        
        // üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        public double MaxReachDistanceKm { get; set; } = 2250; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å –Ω–∞ –ø–æ–ª–Ω–æ–º –±–∞–∫–µ
        public int MaxGraphNodes { get; set; } = 10000; // –õ–∏–º–∏—Ç —É–∑–ª–æ–≤ –≥—Ä–∞—Ñ–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        public DijkstraFuelOptimizer(
            IChainCostCalculator costCalculator = null,
            IChainValidator validator = null)
        {
            _costCalculator = costCalculator ?? new SmartChainCostCalculator();
            _validator = validator ?? new ComprehensiveChainValidator();
        }

        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∑–∞–ø—Ä–∞–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É—è –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã
        /// </summary>
        public StopPlanInfo FindOptimalRoute(
            List<GeoPoint> route,
            List<FuelStation> stations,
            double totalDistanceKm,
            double fuelConsumptionPerKm,
            double currentFuelLiters,
            double tankCapacity,
            List<RequiredStationDto> requiredStops,
            double finishFuel)
        {
            var context = new FuelPlanningContext
            {
                Route = route,
                TotalDistanceKm = totalDistanceKm,
                FuelConsumptionPerKm = fuelConsumptionPerKm,
                CurrentFuelLiters = currentFuelLiters,
                TankCapacity = tankCapacity,
                FinishFuel = finishFuel,
                RequiredStops = requiredStops,
                RoadSectionId = "dijkstra-optimization"
            };

            Console.WriteLine($"üó∫Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –¥–ª—è {stations.Count} —Å—Ç–∞–Ω—Ü–∏–π...");

            // 1. –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–ø—Ä–∞–≤–æ—á–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
            var graph = BuildFuelStationGraph(stations, route, context);
            Console.WriteLine($"üìä –ì—Ä–∞—Ñ –ø–æ—Å—Ç—Ä–æ–µ–Ω: {graph.Nodes.Count} —É–∑–ª–æ–≤, {graph.Edges.Count} —Ä—ë–±–µ—Ä");

            // 1.5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –±–µ–∑ –∑–∞–ø—Ä–∞–≤–æ–∫
            var directRouteCheck = CheckDirectRouteToFinish(context);
            if (directRouteCheck.IsPossible)
            {
                Console.WriteLine("üéØ –ü—Ä—è–º–æ–π –º–∞—Ä—à—Ä—É—Ç –≤–æ–∑–º–æ–∂–µ–Ω –±–µ–∑ –∑–∞–ø—Ä–∞–≤–æ–∫!");
                return new StopPlanInfo 
                { 
                    StopPlan = new List<FuelStopPlan>(),
                    Finish = CreateFinishInfo(context, directRouteCheck.FuelAtFinish)
                };
            }

            // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã
            var optimalPath = RunDijkstraAlgorithm(graph, context);
            
            if (optimalPath == null || !optimalPath.IsValid)
            {
                Console.WriteLine("‚ùå –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return new StopPlanInfo 
                { 
                    StopPlan = new List<FuelStopPlan>(),
                    Finish = CreateFinishInfo(context)
                };
            }

            Console.WriteLine($"üéØ –ù–∞–π–¥–µ–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {optimalPath.Stations.Count} –æ—Å—Ç–∞–Ω–æ–≤–æ–∫, —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${optimalPath.TotalCost:F2}");

            // 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return ConvertPathToStopPlanInfo(optimalPath, context);
        }

        /// <summary>
        /// –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ –∑–∞–ø—Ä–∞–≤–æ—á–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π —Å –≤–µ—Å–∞–º–∏ —Ä—ë–±–µ—Ä
        /// </summary>
        private FuelStationGraph BuildFuelStationGraph(
            List<FuelStation> stations, 
            List<GeoPoint> route,
            FuelPlanningContext context)
        {
            var graph = new FuelStationGraph();

            // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏—è—Ö
            var stationInfos = CreateStationInfos(stations, route)
                .Where(si => si.PricePerLiter > 0 && si.PricePerLiter != double.MaxValue)
                .OrderBy(si => si.ForwardDistanceKm)
                .ToList();

            // 1. –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª
            var startNode = new FuelGraphNode
            {
                Id = "START",
                NodeType = GraphNodeType.Start,
                Position = 0,
                FuelLevel = context.CurrentFuelLiters,
                StationInfo = null
            };
            graph.AddNode(startNode);

            // 2. –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∏—à–Ω—ã–π —É–∑–µ–ª  
            var finishNode = new FuelGraphNode
            {
                Id = "FINISH",
                NodeType = GraphNodeType.Finish,
                Position = context.TotalDistanceKm,
                FuelLevel = context.FinishFuel,
                StationInfo = null
            };
            graph.AddNode(finishNode);

            // 3. –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –∑–∞–ø—Ä–∞–≤–∫–∏
            foreach (var station in stationInfos)
            {
                CreateStationNodes(graph, station, context);
            }

            // 4. –°–æ–∑–¥–∞–µ–º —Ä—ë–±—Ä–∞ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
            CreateGraphEdges(graph, context);

            return graph;
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —É–∑–ª—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –∑–∞–ø—Ä–∞–≤–∫–∏
        /// </summary>
        private void CreateStationNodes(FuelStationGraph graph, StationInfo station, FuelPlanningContext context)
        {
            // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏ (25%, 50%, 75%, 100%)
            var refillLevels = new[] { 0.25, 0.5, 0.75, 1.0 };
            
            foreach (var level in refillLevels)
            {
                var nodeId = $"STATION_{station.Station.Id}_{level:P0}";
                var estimatedRefill = context.TankCapacity * level;
                
                var node = new FuelGraphNode
                {
                    Id = nodeId,
                    NodeType = GraphNodeType.Station,
                    Position = station.ForwardDistanceKm,
                    FuelLevel = estimatedRefill, // –≠—Ç–æ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–æ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ä—ë–±–µ—Ä
                    StationInfo = station,
                    RefillLevel = level
                };
                
                graph.AddNode(node);
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —Ä—ë–±—Ä–∞ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ –≥—Ä–∞—Ñ–∞
        /// </summary>
        private void CreateGraphEdges(FuelStationGraph graph, FuelPlanningContext context)
        {
            var maxRange = context.TankCapacity / context.FuelConsumptionPerKm;

            foreach (var fromNode in graph.Nodes.Values)
            {
                foreach (var toNode in graph.Nodes.Values)
                {
                    if (fromNode.Id == toNode.Id) continue;
                    if (toNode.Position <= fromNode.Position) continue; // –¢–æ–ª—å–∫–æ –≤–ø–µ—Ä–µ–¥

                    var distance = toNode.Position - fromNode.Position;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å
                    if (distance > maxRange) continue;

                    // –°–æ–∑–¥–∞–µ–º —Ä–µ–±—Ä–æ –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω
                    var edge = CreateEdgeIfValid(fromNode, toNode, context);
                    if (edge != null)
                    {
                        graph.AddEdge(edge);
                    }
                }
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–±—Ä–æ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤–∞–ª–∏–¥–µ–Ω
        /// </summary>
        private FuelGraphEdge CreateEdgeIfValid(
            FuelGraphNode fromNode, 
            FuelGraphNode toNode, 
            FuelPlanningContext context)
        {
            var distance = toNode.Position - fromNode.Position;
            var fuelNeeded = distance * context.FuelConsumptionPerKm;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞
            double startFuel;
            if (fromNode.NodeType == GraphNodeType.Start)
            {
                startFuel = context.CurrentFuelLiters;
            }
            else if (fromNode.NodeType == GraphNodeType.Station)
            {
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø—Ä–∏–±—ã—Ç–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–∞–ø–∞—Å–æ–º –∏ –¥–æ–∑–∞–ø—Ä–∞–≤–∫—É
                var arrivalFuel = Math.Max(0, context.TankCapacity * 0.2); // 20% –∑–∞–ø–∞—Å
                startFuel = arrivalFuel + (context.TankCapacity * fromNode.RefillLevel);
                startFuel = Math.Min(startFuel, context.TankCapacity);
            }
            else
            {
                return null; // –ò–∑ —Ñ–∏–Ω–∏—à–∞ –Ω–∏–∫—É–¥–∞ –Ω–µ –µ–¥–µ–º
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∏—Ç –ª–∏ —Ç–æ–ø–ª–∏–≤–∞
            var fuelAtArrival = startFuel - fuelNeeded;
            var minReserve = context.TankCapacity * FuelPlanningConfig.MinReserveFactor;
            
            if (fuelAtArrival < 0) return null; // –ù–µ –¥–æ–π–¥–µ–º
            
            // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –î–ª—è —Ñ–∏–Ω–∏—à–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞
            if (toNode.NodeType == GraphNodeType.Finish)
            {
                if (fuelAtArrival < context.FinishFuel)
                {
                    // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è —Ñ–∏–Ω–∏—à–∞ —Å —Ç—Ä–µ–±—É–µ–º—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º
                    return null;
                }
                
                // ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∏—à—É –≤–∞–ª–∏–¥–µ–Ω - —Ç–æ–ø–ª–∏–≤–∞ —Ö–≤–∞—Ç–∞–µ—Ç
                return new FuelGraphEdge
                {
                    FromNode = fromNode,
                    ToNode = toNode,
                    Distance = distance,
                    FuelUsed = fuelNeeded,
                    TransitionCost = 0, // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∏—à—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
                    FuelAtDestination = fuelAtArrival
                };
            }
            
            // –î–ª—è —Å—Ç–∞–Ω—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å (–∫—Ä–æ–º–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π)
            if (toNode.NodeType == GraphNodeType.Station && fuelAtArrival < minReserve)
            {
                // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è (–º–∞–ª–æ —Ç–æ–ø–ª–∏–≤–∞ –≤–Ω–∞—á–∞–ª–µ)
                var fuelPercentage = (context.CurrentFuelLiters / context.TankCapacity);
                if (fromNode.NodeType != GraphNodeType.Start || fuelPercentage > 0.3)
                {
                    return null;
                }
            }

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞
            var transitionCost = CalculateTransitionCost(fromNode, toNode, fuelAtArrival, context);

            return new FuelGraphEdge
            {
                FromNode = fromNode,
                ToNode = toNode,
                Distance = distance,
                FuelUsed = fuelNeeded,
                TransitionCost = transitionCost,
                FuelAtDestination = fuelAtArrival
            };
        }

        /// <summary>
        /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
        /// </summary>
        private double CalculateTransitionCost(
            FuelGraphNode fromNode, 
            FuelGraphNode toNode, 
            double fuelAtArrival,
            FuelPlanningContext context)
        {
            if (toNode.NodeType == GraphNodeType.Finish)
            {
                // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∏—à—É - —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞, –±–µ–∑ –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏
                return 0;
            }

            if (toNode.NodeType == GraphNodeType.Station)
            {
                // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–Ω—Ü–∏–∏ - —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏
                var refillAmount = CalculateOptimalRefillForStation(toNode, fuelAtArrival, context);
                var fuelCost = refillAmount * toNode.StationInfo.PricePerLiter;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫
                var stopPenalty = 10.0; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                
                return fuelCost + stopPenalty;
            }

            return 0;
        }

        /// <summary>
        /// üéØ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –¥–æ–∑–∞–ø—Ä–∞–≤–∫—É —Å —É—á–µ—Ç–æ–º —Ñ–∏–Ω–∏—à–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞
        /// </summary>
        private double CalculateOptimalRefillForStation(
            FuelGraphNode stationNode, 
            double fuelAtArrival, 
            FuelPlanningContext context)
        {
            var distanceToFinish = context.TotalDistanceKm - stationNode.Position;
            var fuelNeededToFinish = distanceToFinish * context.FuelConsumptionPerKm;
            var totalFuelNeededForFinish = fuelNeededToFinish + context.FinishFuel;
            
            // –í–∞—Ä–∏–∞–Ω—Ç 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–ø—Ä–∞–≤–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ñ–∏–Ω–∏—à–∞
            var minRefillForFinish = Math.Max(0, totalFuelNeededForFinish - fuelAtArrival);
            
            // –í–∞—Ä–∏–∞–Ω—Ç 2: –ó–∞–ø—Ä–∞–≤–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ä–æ–≤–Ω—é —É–∑–ª–∞
            var nodeRefillAmount = context.TankCapacity * stationNode.RefillLevel;
            
            // –í–∞—Ä–∏–∞–Ω—Ç 3: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è –∑–∞–ø—Ä–∞–≤–∫–∞
            var maxPossibleRefill = context.TankCapacity - fuelAtArrival;
            
            // –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:
            // –ï—Å–ª–∏ –º–æ–∂–µ–º –¥–æ–π—Ç–∏ –¥–æ —Ñ–∏–Ω–∏—à–∞ —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–ø–ª–∏–≤–æ–º - –∑–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —É–∑–ª—É
            if (fuelAtArrival >= totalFuelNeededForFinish)
            {
                return Math.Min(nodeRefillAmount, maxPossibleRefill);
            }
            else
            {
                // –ò–Ω–∞—á–µ –∑–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è –º–∏–Ω–∏–º—É–º –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ñ–∏–Ω–∏—à–∞, 
                // –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ —á–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —É–∑–µ–ª (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
                var optimalRefill = Math.Max(minRefillForFinish, 
                    Math.Min(nodeRefillAmount, maxPossibleRefill));
                return Math.Min(optimalRefill, maxPossibleRefill);
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
        /// </summary>
        private OptimalPath RunDijkstraAlgorithm(FuelStationGraph graph, FuelPlanningContext context)
        {
            var distances = new Dictionary<string, double>();
            var previous = new Dictionary<string, string>();
            var visited = new HashSet<string>();
            var priorityQueue = new SortedSet<(double Distance, string NodeId)>();

            var startNodeId = "START";
            var finishNodeId = "FINISH";

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            foreach (var node in graph.Nodes)
            {
                distances[node.Key] = double.MaxValue;
                previous[node.Key] = null;
            }

            distances[startNodeId] = 0;
            priorityQueue.Add((0, startNodeId));

            Console.WriteLine($"üîç –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –î–µ–π–∫—Å—Ç—Ä—ã –¥–ª—è {graph.Nodes.Count} —É–∑–ª–æ–≤...");

            // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –î–µ–π–∫—Å—Ç—Ä—ã
            while (priorityQueue.Count > 0)
            {
                var (currentDistance, currentNodeId) = priorityQueue.Min;
                priorityQueue.Remove(priorityQueue.Min);

                if (visited.Contains(currentNodeId)) continue;
                visited.Add(currentNodeId);

                // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ñ–∏–Ω–∏—à–∞, –º–æ–∂–µ–º –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫
                if (currentNodeId == finishNodeId)
                {
                    Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω –ø—É—Ç—å –¥–æ —Ñ–∏–Ω–∏—à–∞ —Å —Å—Ç–æ–∏–º–æ—Å—Ç—å—é: ${currentDistance:F2}");
                    break;
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π
                var edges = graph.GetEdgesFrom(currentNodeId);
                foreach (var edge in edges)
                {
                    var neighborId = edge.ToNode.Id;
                    if (visited.Contains(neighborId)) continue;

                    var alternativeDistance = currentDistance + edge.TransitionCost;

                    if (alternativeDistance < distances[neighborId])
                    {
                        distances[neighborId] = alternativeDistance;
                        previous[neighborId] = currentNodeId;
                        priorityQueue.Add((alternativeDistance, neighborId));
                    }
                }
            }

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å
            return ReconstructPath(previous, distances, graph, startNodeId, finishNodeId);
        }

        /// <summary>
        /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –î–µ–π–∫—Å—Ç—Ä—ã
        /// </summary>
        private OptimalPath ReconstructPath(
            Dictionary<string, string> previous,
            Dictionary<string, double> distances,
            FuelStationGraph graph,
            string startNodeId,
            string finishNodeId)
        {
            if (!distances.ContainsKey(finishNodeId) || distances[finishNodeId] == double.MaxValue)
            {
                return new OptimalPath { IsValid = false };
            }

            var path = new List<FuelGraphNode>();
            var currentNodeId = finishNodeId;

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –æ—Ç —Ñ–∏–Ω–∏—à–∞ –∫ —Å—Ç–∞—Ä—Ç—É
            while (currentNodeId != null)
            {
                path.Add(graph.Nodes[currentNodeId]);
                currentNodeId = previous[currentNodeId];
            }

            path.Reverse(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∫ —Ñ–∏–Ω–∏—à—É

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω—Ü–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º START –∏ FINISH)
            var stationNodes = path
                .Where(node => node.NodeType == GraphNodeType.Station)
                .ToList();

            return new OptimalPath
            {
                IsValid = true,
                Stations = stationNodes.Select(node => node.StationInfo).ToList(),
                TotalCost = distances[finishNodeId],
                NodesInPath = path
            };
        }

        /// <summary>
        /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        /// </summary>
        private StopPlanInfo ConvertPathToStopPlanInfo(OptimalPath optimalPath, FuelPlanningContext context)
        {
            var stops = new List<FuelStopPlan>();
            var currentFuel = context.CurrentFuelLiters;
            var currentPosition = 0.0;

            foreach (var stationNode in optimalPath.NodesInPath.Where(n => n.NodeType == GraphNodeType.Station))
            {
                var station = stationNode.StationInfo;
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –¥–æ —Å—Ç–∞–Ω—Ü–∏–∏
                var distance = station.ForwardDistanceKm - currentPosition;
                var fuelUsed = distance * context.FuelConsumptionPerKm;
                var fuelAtArrival = currentFuel - fuelUsed;

                // üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∏–Ω–∏—à–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞
                var refillAmount = CalculateOptimalRefillForStation(stationNode, fuelAtArrival, context);

                var stop = new FuelStopPlan
                {
                    Station = station.Station,
                    StopAtKm = station.ForwardDistanceKm,
                    RefillLiters = refillAmount,
                    CurrentFuelLiters = fuelAtArrival,
                    RoadSectionId = context.RoadSectionId
                };

                stops.Add(stop);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                currentFuel = fuelAtArrival + refillAmount;
                currentPosition = station.ForwardDistanceKm;
            }

            // üîç –ü—Ä–æ–≤–µ—Ä–∏–º, –¥–æ—Å—Ç–∏–≥–Ω–µ–º –ª–∏ —Ñ–∏–Ω–∏—à–∞ —Å —Ç—Ä–µ–±—É–µ–º—ã–º —Ç–æ–ø–ª–∏–≤–æ–º
            var finalDistance = context.TotalDistanceKm - currentPosition;
            var finalFuelUsed = finalDistance * context.FuelConsumptionPerKm;
            var fuelAtFinish = currentFuel - finalFuelUsed;

            Console.WriteLine($"üèÅ –§–∏–Ω–∏—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¢–æ–ø–ª–∏–≤–æ –Ω–∞ —Ñ–∏–Ω–∏—à–µ: {fuelAtFinish:F1}–ª, –¢—Ä–µ–±—É–µ—Ç—Å—è: {context.FinishFuel:F1}–ª");

            return new StopPlanInfo
            {
                StopPlan = stops,
                Finish = CreateFinishInfo(context, fuelAtFinish)
            };
        }

        /// <summary>
        /// üéØ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ —Ñ–∏–Ω–∏—à–∞ –±–µ–∑ –∑–∞–ø—Ä–∞–≤–æ–∫
        /// </summary>
        private DirectRouteResult CheckDirectRouteToFinish(FuelPlanningContext context)
        {
            var totalFuelNeeded = context.TotalDistanceKm * context.FuelConsumptionPerKm;
            var fuelAtFinish = context.CurrentFuelLiters - totalFuelNeeded;
            
            var isPossible = fuelAtFinish >= context.FinishFuel;
            
            Console.WriteLine($"üßÆ –ü—Ä—è–º–æ–π –º–∞—Ä—à—Ä—É—Ç: –¢–µ–∫—É—â–µ–µ —Ç–æ–ø–ª–∏–≤–æ: {context.CurrentFuelLiters:F1}–ª, " +
                            $"–ù—É–∂–Ω–æ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏: {totalFuelNeeded:F1}–ª, " +
                            $"–û—Å—Ç–∞–Ω–µ—Ç—Å—è: {fuelAtFinish:F1}–ª, " +
                            $"–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞ —Ñ–∏–Ω–∏—à–µ: {context.FinishFuel:F1}–ª");
            
            return new DirectRouteResult
            {
                IsPossible = isPossible,
                FuelAtFinish = Math.Max(0, fuelAtFinish)
            };
        }

        #region Helper Methods

        private List<StationInfo> CreateStationInfos(List<FuelStation> stations, List<GeoPoint> route)
        {
            var routeAnalyzer = new NewRouteAnalyzer();
            return stations.Select(station => new StationInfo
            {
                Station = station,
                ForwardDistanceKm = routeAnalyzer.CalculateForwardDistanceRecursively(route, station.Coordinates, 0, 0),
                PricePerLiter = GetBestPrice(station)
            }).Where(si => si.ForwardDistanceKm > 0)
              .OrderBy(si => si.ForwardDistanceKm)
              .ToList();
        }

        private double GetBestPrice(FuelStation station)
        {
            return station.FuelPrices
                .Where(fp => fp.PriceAfterDiscount > 0)
                .OrderBy(fp => fp.PriceAfterDiscount)
                .FirstOrDefault()?.PriceAfterDiscount ?? 0;
        }

        private FinishInfo CreateFinishInfo(FuelPlanningContext context, double? actualFuelAtFinish = null)
        {
            return new FinishInfo
            {
                RemainingFuelLiters = actualFuelAtFinish ?? context.FinishFuel
            };
        }

        #endregion
    }

    #region Graph Data Structures

    /// <summary>
    /// –ì—Ä–∞—Ñ –∑–∞–ø—Ä–∞–≤–æ—á–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
    /// </summary>
    public class FuelStationGraph
    {
        public Dictionary<string, FuelGraphNode> Nodes { get; } = new Dictionary<string, FuelGraphNode>();
        public List<FuelGraphEdge> Edges { get; } = new List<FuelGraphEdge>();

        public void AddNode(FuelGraphNode node)
        {
            Nodes[node.Id] = node;
        }

        public void AddEdge(FuelGraphEdge edge)
        {
            Edges.Add(edge);
        }

        public List<FuelGraphEdge> GetEdgesFrom(string nodeId)
        {
            return Edges.Where(e => e.FromNode.Id == nodeId).ToList();
        }
    }

    /// <summary>
    /// –£–∑–µ–ª –≥—Ä–∞—Ñ–∞ (—Å—Ç–∞–Ω—Ü–∏—è –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞)
    /// </summary>
    public class FuelGraphNode
    {
        public string Id { get; set; }
        public GraphNodeType NodeType { get; set; }
        public double Position { get; set; } // –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ –≤ –∫–º
        public double FuelLevel { get; set; } // –£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞ –≤ —É–∑–ª–µ
        public StationInfo StationInfo { get; set; }
        public double RefillLevel { get; set; } // –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏ (0.0 - 1.0)
    }

    /// <summary>
    /// –†–µ–±—Ä–æ –≥—Ä–∞—Ñ–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏)
    /// </summary>
    public class FuelGraphEdge
    {
        public FuelGraphNode FromNode { get; set; }
        public FuelGraphNode ToNode { get; set; }
        public double Distance { get; set; }
        public double FuelUsed { get; set; }
        public double TransitionCost { get; set; } // –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ (—Ç–æ–ø–ª–∏–≤–æ + —à—Ç—Ä–∞—Ñ—ã)
        public double FuelAtDestination { get; set; }
    }

    /// <summary>
    /// –¢–∏–ø —É–∑–ª–∞ –≤ –≥—Ä–∞—Ñ–µ
    /// </summary>
    public enum GraphNodeType
    {
        Start,   // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
        Station, // –ó–∞–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è
        Finish   // –§–∏–Ω–∏—à–Ω–∞—è —Ç–æ—á–∫–∞
    }

    /// <summary>
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
    /// </summary>
    public class OptimalPath
    {
        public bool IsValid { get; set; }
        public List<StationInfo> Stations { get; set; } = new List<StationInfo>();
        public double TotalCost { get; set; }
        public List<FuelGraphNode> NodesInPath { get; set; } = new List<FuelGraphNode>();
    }

    /// <summary>
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä—è–º–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    /// </summary>
    public class DirectRouteResult
    {
        public bool IsPossible { get; set; }
        public double FuelAtFinish { get; set; }
    }

    #endregion
}
