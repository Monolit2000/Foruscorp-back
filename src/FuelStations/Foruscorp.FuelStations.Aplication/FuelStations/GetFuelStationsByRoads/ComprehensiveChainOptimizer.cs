using Foruscorp.FuelStations.Domain.FuelStations;
using System;
using System.Collections.Generic;
using System.Linq;
using static System.Collections.Specialized.BitVector32;

namespace Foruscorp.FuelStations.Aplication.FuelStations.GetFuelStationsByRoads
{
    /// <summary>
    /// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ü–µ–ø–æ—á–µ–∫ –∑–∞–ø—Ä–∞–≤–æ–∫ —Å –ø–æ–ª–Ω—ã–º –ø–µ—Ä–µ–±–æ—Ä–æ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    /// –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–ø–ª–∏–≤–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–∞–º—É—é –≤—ã–≥–æ–¥–Ω—É—é —Ü–µ–ø–æ—á–∫—É
    /// </summary>
    public class ComprehensiveChainOptimizer
    {
        private readonly IChainCostCalculator _costCalculator;
        private readonly IChainValidator _validator;
        
        // üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        public int MaxCheapStationsPerStep { get; set; } = 17;  // –ú–∞–∫—Å–∏–º—É–º –¥–µ—à–µ–≤—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
        public bool EnableCheapStationOptimization { get; set; } = true;  // –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é

        public ComprehensiveChainOptimizer(
            IChainCostCalculator costCalculator = null,
            IChainValidator validator = null)
        {
            _costCalculator = costCalculator ?? new SmartChainCostCalculator();
            _validator = validator ?? new ComprehensiveChainValidator();
        }

        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É –∑–∞–ø—Ä–∞–≤–æ–∫ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        /// </summary>
        public StopPlanInfo FindOptimalChainComprehensive(
            List<GeoPoint> route,
            List<FuelStation> stations, 
            double totalDistanceKm,
            double fuelConsumptionPerKm,
            double currentFuelLiters,
            double tankCapacity,
            List<RequiredStationDto> requiredStops,
            double finishFuel, string RoadSectionId)
        {
            var context = new FuelPlanningContext
            {
                Route = route,
                TotalDistanceKm = totalDistanceKm,
                FuelConsumptionPerKm = fuelConsumptionPerKm,
                CurrentFuelLiters = currentFuelLiters,
                TankCapacity = tankCapacity,
                FinishFuel = finishFuel,
                RequiredStops = requiredStops,
                RoadSectionId = RoadSectionId
            };

            // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏—è—Ö —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
            var stationInfosF = CreateStationInfos(stations, route);

            var stationInfos = stationInfosF
                .Where(si => si.PricePerLiter != double.MaxValue)
                .Where(si => si.PricePerLiter > 0).ToList();

            Console.WriteLine($"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {stationInfos.Count} —Å—Ç–∞–Ω—Ü–∏–π...");

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏
            var allChains = GenerateAllPossibleChains(stationInfos, context);
            Console.WriteLine($"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {allChains.Count} –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫");

            // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏
            var validChains = FilterValidChains(allChains, context);
            Console.WriteLine($"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫: {validChains.Count}");

            if (!validChains.Any())
            {
                Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫!");
                return new StopPlanInfo 
                { 
                    StopPlan = new List<FuelStopPlan>(),
                    Finish = CreateFinishInfo(context)
                };
            }

            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
            var chainCosts = CalculateChainCosts(validChains, context);

            // –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É
            var optimalChain = SelectOptimalChain(chainCosts);
            Console.WriteLine($"üéØ –í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ —Å {optimalChain.Chain.Stations.Count} –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏");

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return ConvertToStopPlanInfo(optimalChain, context);
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ –∑–∞–ø—Ä–∞–≤–æ–∫
        /// </summary>
        private List<FuelChain> GenerateAllPossibleChains(
            List<StationInfo> stations, 
            FuelPlanningContext context)
        {
            var allChains = new List<FuelChain>();

            // 1. –¶–µ–ø–æ—á–∫–∞ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–π—Ç–∏ –¥–æ —Ñ–∏–Ω–∏—à–∞)
            var noStopsChain = new FuelChain { Stations = new List<StationInfo>() };
            allChains.Add(noStopsChain);

            // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫–∏ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã (–æ—Ç 1 –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã)
            var maxChainLength = Math.Min(stations.Count, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

            for (int chainLength = 1; chainLength <= maxChainLength; chainLength++)
            {
                var chainsOfLength = GenerateChainsOfLength(stations, chainLength, context);

                var newasdsad = chainsOfLength.OrderBy(c => c.Stations.First().PricePerLiter).ToList();

                allChains.AddRange(chainsOfLength);
                
                Console.WriteLine($"   –î–ª–∏–Ω–∞ {chainLength}: {chainsOfLength.Count} —Ü–µ–ø–æ—á–µ–∫");
                
                // –ï—Å–ª–∏ —Ü–µ–ø–æ—á–µ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                if (allChains.Count > 1000000) // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                {
                    Console.WriteLine($"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ø–æ—á–µ–∫: {allChains.Count}");
                    break;
                }
            }

            return allChains;
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ü–µ–ø–æ—á–∫–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
        /// </summary>
        private List<FuelChain> GenerateChainsOfLength(
            List<StationInfo> stations, 
            int length, 
            FuelPlanningContext context)
        {
            var chains = new List<FuelChain>();

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            GenerateCombinationsRecursive(
                stations, 
                length, 
                new List<StationInfo>(), 
                0, 
                chains, 
                context);

            return chains;
        }

        /// <summary>
        /// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å—Ç–∞–Ω—Ü–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–æ –¥–µ—à–µ–≤—ã–º —Å—Ç–∞–Ω—Ü–∏—è–º
        /// </summary>
        private void GenerateCombinationsRecursive(
            List<StationInfo> allStations,
            int targetLength,
            List<StationInfo> currentChain,
            int startIndex,
            List<FuelChain> result,
            FuelPlanningContext context)
        {
            // –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
            if (currentChain.Count == targetLength)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ø–æ—á–∫–∞ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
                if (IsChainOrderedByDistance(currentChain))
                {
                    result.Add(new FuelChain { Stations = new List<StationInfo>(currentChain) });
                }
                return;
            }

            // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –ø–æ–ª–Ω–æ–º –±–∞–∫–µ
            List<StationInfo> stationsToProcess;
            
            if (EnableCheapStationOptimization)
            {
                stationsToProcess = GetAffordableCheapestStations(
                    allStations, currentChain, startIndex, context, MaxCheapStationsPerStep);
            }
            else
            {
                // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ - –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏
                stationsToProcess = allStations
                    .Skip(startIndex)
                    .Where(station => CanAddStationToChain(currentChain, station, context))
                    .ToList();
            }

            //Console.WriteLine($"     –ù–∞–π–¥–µ–Ω–æ {stationsToProcess.Count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ {allStations.Count - startIndex}");

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
            foreach (var station in stationsToProcess)
            {
                currentChain.Add(station);
                
                // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π startIndex –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–∫—É—Ä—Å–∏–∏
                var nextStartIndex = allStations.FindIndex(s => s.ForwardDistanceKm > station.ForwardDistanceKm);
                if (nextStartIndex == -1) nextStartIndex = allStations.Count;
                
                GenerateCombinationsRecursive(allStations, targetLength, currentChain, nextStartIndex, result, context);
                currentChain.RemoveAt(currentChain.Count - 1); 
            }
        }

        /// <summary>
        /// üí° –ù–û–í–´–ô –ú–ï–¢–û–î: –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏, –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—Ä–∞–∫ –º–æ–∂–µ—Ç –¥–æ–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–ª–Ω–æ–º –±–∞–∫–µ
        /// </summary>
        private List<StationInfo> GetAffordableCheapestStations(
            List<StationInfo> allStations,
            List<StationInfo> currentChain,
            int startIndex,
            FuelPlanningContext context,
            int maxCheapStations)
        {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            var currentPosition = currentChain.Any() ? currentChain.Last().ForwardDistanceKm : 0.0;
            var isFirstStation = !currentChain.Any();
            var currentFuelPercentage = GetCurrentFuelPercentage(currentChain, context);
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω–æ–º –±–∞–∫–µ
            var maxRangeOnFullTank = context.TankCapacity / context.FuelConsumptionPerKm;
            var maxReachableDistance = currentPosition + maxRangeOnFullTank;

            //Console.WriteLine($"       –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {currentPosition:F0}–∫–º");
            //Console.WriteLine($"       –ó–∞–ø–∞—Å —Ö–æ–¥–∞ –Ω–∞ –ø–æ–ª–Ω–æ–º –±–∞–∫–µ: {maxRangeOnFullTank:F0}–∫–º");
            //Console.WriteLine($"       –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç–∏–∂–∏–º–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {maxReachableDistance:F0}–∫–º");

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –ø–æ–ª–Ω–æ–º –±–∞–∫–µ

            var reachableStations = allStations
                .Skip(startIndex)
                .Where(station => 
                {
                    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    if (station.ForwardDistanceKm <= currentPosition) return false;
                    if (station.ForwardDistanceKm > maxReachableDistance) return false;

                    if (isFirstStation)
                    {

                        var distance = station.ForwardDistanceKm - currentPosition;
                        var fuelUsed = distance * context.FuelConsumptionPerKm;
                        var fuelAtArrival = context.CurrentFuelLiters - fuelUsed;

                        var minReserve = context.TankCapacity * FuelPlanningConfig.MinReserveFactor;

                        if (fuelAtArrival < minReserve)
                            return false;

                        if (station.ForwardDistanceKm > (currentFuelPercentage * context.TankCapacity) / context.FuelConsumptionPerKm) return false;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ü–µ–ø–æ—á–∫—É
                    return CanAddStationToChain(currentChain, station, context);
                })
                .ToList();

            //Console.WriteLine($"       –î–æ—Å—Ç–∏–∂–∏–º—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π: {reachableStations.Count}");

            if (!reachableStations.Any())
            {
                //Console.WriteLine($"       ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç–∏–∂–∏–º—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π!");
                return new List<StationInfo>();
            }

            // –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ –¥–æ—Å—Ç–∏–∂–∏–º—ã—Ö
            var cheapestStations = reachableStations
                .OrderBy(s => s.PricePerLiter)                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
                .ThenBy(s => s.ForwardDistanceKm)                 // –ü—Ä–∏ —Ä–∞–≤–Ω–æ–π —Ü–µ–Ω–µ - –±–ª–∏–∂–∞–π—à–∏–µ
                .Take(maxCheapStations)                           // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 16 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö
                .OrderBy(s => s.ForwardDistanceKm)                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
                .ToList();

            //Console.WriteLine($"       –û—Ç–æ–±—Ä–∞–Ω–æ {cheapestStations.Count} —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö:");
            //foreach (var station in cheapestStations.Take(5)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            //{
            //    Console.WriteLine($"         ‚Ä¢ {station.Station?.ProviderName}: {station.ForwardDistanceKm:F0}–∫–º, ${station.PricePerLiter:F2}/–ª");
            //}
            //if (cheapestStations.Count > 5)
            //{
            //    Console.WriteLine($"         ... –∏ –µ—â—ë {cheapestStations.Count - 5} —Å—Ç–∞–Ω—Ü–∏–π");
            //}

            return cheapestStations;
        }

        private double GetCurrentFuelPercentage(List<StationInfo> currentChain, FuelPlanningContext context)
        {
            var currentFuel = context.CurrentFuelLiters;
            var currentPosition = 0.0;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –ø–æ —Ü–µ–ø–æ—á–∫–µ
            foreach (var station in currentChain)
            {
                var distance = station.ForwardDistanceKm - currentPosition;
                var fuelUsed = distance * context.FuelConsumptionPerKm;
                currentFuel -= fuelUsed;

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–∞–≤–∫—É (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç - –¥–æ –ø–æ–ª–Ω–æ–≥–æ –±–∞–∫–∞)
                currentFuel = context.TankCapacity;
                currentPosition = station.ForwardDistanceKm;
            }

            // –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ø–æ—á–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ —Ç–æ–ø–ª–∏–≤–æ
            return currentFuel / context.TankCapacity;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏—é –≤ —Ü–µ–ø–æ—á–∫—É
        /// </summary>
        private bool CanAddStationToChain(
            List<StationInfo> currentChain, 
            StationInfo station, 
            FuelPlanningContext context)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            if (currentChain.Any() && station.ForwardDistanceKm <= currentChain.Last().ForwardDistanceKm)
                return false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏
            if (currentChain.Any())
            {
                var lastStation = currentChain.Last();
                var distance = station.ForwardDistanceKm - lastStation.ForwardDistanceKm;
                if (distance < FuelPlanningConfig.MinStopDistanceKm)
                    return false;
            }
            else
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Å—Ç–∞—Ä—Ç–∞ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
                if (station.ForwardDistanceKm < 50) // –ú–∏–Ω–∏–º—É–º 50–∫–º –æ—Ç —Å—Ç–∞—Ä—Ç–∞
                    return false;
            }

            return true;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–∞ –ª–∏ —Ü–µ–ø–æ—á–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        /// </summary>
        private bool IsChainOrderedByDistance(List<StationInfo> chain)
        {
            for (int i = 1; i < chain.Count; i++)
            {
                if (chain[i].ForwardDistanceKm <= chain[i-1].ForwardDistanceKm)
                    return false;
            }
            return true;
        }

        /// <summary>
        /// –§–∏–ª—å—Ç—Ä—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏
        /// </summary>
        private List<FuelChain> FilterValidChains(
            List<FuelChain> allChains, 
            FuelPlanningContext context)
        {
            var validChains = new List<FuelChain>();

            foreach (var chain in allChains)
            {
                if (_validator.IsChainValid(chain, context))
                {
                    validChains.Add(chain);
                }
            }

            return validChains;
        }

        /// <summary>
        /// –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Ü–µ–ø–æ—á–µ–∫
        /// </summary>
        private List<ChainCostInfo> CalculateChainCosts(
            List<FuelChain> validChains, 
            FuelPlanningContext context)
        {
            var chainCosts = new List<ChainCostInfo>();

            foreach (var chain in validChains)
            {
                var cost = _costCalculator.CalculateChainCost(chain, context);
                chainCosts.Add(new ChainCostInfo 
                { 
                    Chain = chain, 
                    Cost = cost 
                });
            }

            return chainCosts.OrderBy(cc => cc.Cost.TotalScore).ToList();
        }

        /// <summary>
        /// –í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É
        /// </summary>
        private ChainCostInfo SelectOptimalChain(List<ChainCostInfo> chainCosts)
        {
            if (!chainCosts.Any())
                throw new InvalidOperationException("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞");

            var dsfsdf = chainCosts.OrderBy(c => c.Cost.TotalFuelCost);

            var optimal = dsfsdf.First(); // –£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ TotalScore

            Console.WriteLine($"üèÜ –û–ü–¢–ò–ú–ê–õ–¨–ù–ê–Ø –¶–ï–ü–û–ß–ö–ê:");
            Console.WriteLine($"   –û—Å—Ç–∞–Ω–æ–≤–æ–∫: {optimal.Chain.Stations.Count}");
            Console.WriteLine($"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞: ${optimal.Cost.TotalFuelCost:F2}");
            Console.WriteLine($"   –û–±—â–∏–π –±–∞–ª–ª: {optimal.Cost.TotalScore:F2}");
            Console.WriteLine($"   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {optimal.Cost.EfficiencyScore:F2}");

            return optimal;
        }

        /// <summary>
        /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        /// </summary>
        private StopPlanInfo ConvertToStopPlanInfo(
            ChainCostInfo optimalChain, 
            FuelPlanningContext context)
        {
            var stops = new List<FuelStopPlan>();
            var currentFuel = context.CurrentFuelLiters;
            var currentPosition = 0.0;

            foreach (var station in optimalChain.Chain.Stations)
            {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –¥–æ —Å—Ç–∞–Ω—Ü–∏–∏
                var distance = station.ForwardDistanceKm - currentPosition;
                var fuelUsed = distance * context.FuelConsumptionPerKm;
                var fuelAtArrival = currentFuel - fuelUsed;

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –¥–æ–∑–∞–ø—Ä–∞–≤–∫—É
                var refillAmount = _costCalculator.CalculateOptimalRefillAmount(
                    station, fuelAtArrival, optimalChain.Chain.Stations, context);

                var stop = new FuelStopPlan
                {
                    Station = station.Station!,
                    StopAtKm = station.ForwardDistanceKm,
                    RefillLiters = refillAmount,
                    CurrentFuelLiters = fuelAtArrival,
                    RoadSectionId = context.RoadSectionId
                };

                stops.Add(stop);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                currentFuel = fuelAtArrival + refillAmount;
                currentPosition = station.ForwardDistanceKm;
            }

            return new StopPlanInfo
            {
                StopPlan = stops,
                Finish = CreateFinishInfo(context)
            };
        }

        #region Helper Methods

        private List<StationInfo> CreateStationInfos(List<FuelStation> stations, List<GeoPoint> route)
        {
            var routeAnalyzer = new NewRouteAnalyzer();
            return stations.Select(station => new StationInfo
            {
                Station = station,
                ForwardDistanceKm = routeAnalyzer.CalculateForwardDistanceRecursively(route, station.Coordinates, 0, 0),
                PricePerLiter = GetBestPrice(station)
            }).Where(si => si.ForwardDistanceKm > 0)
              .OrderBy(si => si.ForwardDistanceKm)
              .ToList();
        }

        private double GetBestPrice(FuelStation station)
        {
            return station.FuelPrices
                .Where(fp => fp.PriceAfterDiscount > 0)
                .OrderBy(fp => fp.PriceAfterDiscount)
                .FirstOrDefault()?.PriceAfterDiscount ?? 0;
        }

        private FinishInfo CreateFinishInfo(FuelPlanningContext context)
        {
            return new FinishInfo
            {
                //TotalDistanceKm = context.TotalDistanceKm,
                RemainingFuelLiters = context.FinishFuel
            };
        }

        #endregion
    }

    /// <summary>
    /// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–ø–æ—á–∫—É –∑–∞–ø—Ä–∞–≤–æ—á–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
    /// </summary>
    public class FuelChain
    {
        public List<StationInfo> Stations { get; set; } = new List<StationInfo>();
    }

    /// <summary>
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ü–µ–ø–æ—á–∫–∏
    /// </summary>
    public class ChainCostInfo
    {
        public FuelChain Chain { get; set; } = new FuelChain();
        public ChainCost Cost { get; set; } = new ChainCost();
    }

    /// <summary>
    /// –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ü–µ–ø–æ—á–∫–∏
    /// </summary>
    public class ChainCost
    {
        public double TotalFuelCost { get; set; }        // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞
        public double TotalRefillAmount { get; set; }    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∑–∞–ø—Ä–∞–≤–∫–∏
        public double TotalDistance { get; set; }        // –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏
        public double EfficiencyScore { get; set; }      // –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        public double TotalScore { get; set; }           // –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        public List<StopCost> StopCosts { get; set; } = new List<StopCost>(); // –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    }

    /// <summary>
    /// –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    /// </summary>
    public class StopCost
    {
        public StationInfo Station { get; set; } = new StationInfo();
        public double RefillAmount { get; set; }
        public double RefillCost { get; set; }
        public double DistanceFromPrevious { get; set; }
        public double FuelEfficiency { get; set; }
    }
}
