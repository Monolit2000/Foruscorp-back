// <auto-generated />
using System;
using Foruscorp.FuelStations.Infrastructure.Percistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Foruscorp.FuelStations.Infrastructure.Migrations
{
    [DbContext(typeof(FuelStationContext))]
    [Migration("20250727134700_Update_GeoPoint")]
    partial class Update_GeoPoint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FuelStation")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Foruscorp.FuelStations.Domain.FuelMapProvaiders.FuelMapProvaider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiToken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("RefreshedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("FuelMapProvaiders", "FuelStation");
                });

            modelBuilder.Entity("Foruscorp.FuelStations.Domain.FuelStations.FuelStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("FuelStationId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FuelProvider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Address");

                    b.ToTable("FuelStations", "FuelStation");
                });

            modelBuilder.Entity("Foruscorp.FuelStations.Domain.FuelStations.FuelStation", b =>
                {
                    b.OwnsMany("Foruscorp.FuelStations.Domain.FuelStations.FuelPrice", "FuelPrices", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<double?>("DiscountedPrice")
                                .HasColumnType("double precision");

                            b1.Property<Guid>("FuelStationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FuelType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<double>("Price")
                                .HasColumnType("double precision");

                            b1.HasKey("Id");

                            b1.HasIndex("FuelStationId");

                            b1.ToTable("FuelPrices", "FuelStation");

                            b1.WithOwner()
                                .HasForeignKey("FuelStationId");
                        });

                    b.OwnsOne("Foruscorp.FuelStations.Domain.FuelStations.GeoPoint", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("FuelStationId")
                                .HasColumnType("uuid");

                            b1.Property<Point>("Coordinates")
                                .IsRequired()
                                .HasColumnType("geography(Point, 4326)")
                                .HasColumnName("Coordinates");

                            b1.HasKey("FuelStationId");

                            b1.ToTable("FuelStations", "FuelStation");

                            b1.WithOwner()
                                .HasForeignKey("FuelStationId");
                        });

                    b.Navigation("Coordinates");

                    b.Navigation("FuelPrices");
                });
#pragma warning restore 612, 618
        }
    }
}
