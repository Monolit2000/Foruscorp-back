// <auto-generated />
using System;
using Foruscorp.FuelStations.Infrastructure.Percistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Foruscorp.FuelStations.Infrastructure.Migrations
{
    [DbContext(typeof(FuelStationContext))]
    partial class FuelStationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FuelStation")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Foruscorp.FuelStations.Domain.FuelMapProvaiders.FuelMapProvaider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiToken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("RefreshedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("FuelMapProvaiders", "FuelStation");
                });

            modelBuilder.Entity("Foruscorp.FuelStations.Domain.FuelStations.FuelStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("FuelStationId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FuelProvider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FuelStationProviderId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Address");

                    b.HasIndex("FuelStationProviderId");

                    b.ToTable("FuelStations", "FuelStation");
                });

            modelBuilder.Entity("Foruscorp.FuelStations.Domain.FuelStations.PriceLoadAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("PriceLoadAttemptId");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("FailedFiles")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SuccessfullyProcessedFiles")
                        .HasColumnType("integer");

                    b.Property<int>("TotalFiles")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompletedAt");

                    b.HasIndex("IsSuccessful");

                    b.HasIndex("StartedAt");

                    b.ToTable("PriceLoadAttempts", "FuelStation");
                });

            modelBuilder.Entity("Foruscorp.FuelStations.Domain.FuelStations.FuelStation", b =>
                {
                    b.OwnsMany("Foruscorp.FuelStations.Domain.FuelStations.FuelPrice", "FuelPrices", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<double?>("DiscountedPrice")
                                .HasColumnType("double precision");

                            b1.Property<Guid>("FuelStationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FuelType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<double>("Price")
                                .HasColumnType("double precision");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id");

                            b1.HasIndex("FuelStationId");

                            b1.ToTable("FuelPrices", "FuelStation");

                            b1.WithOwner()
                                .HasForeignKey("FuelStationId");
                        });

                    b.OwnsOne("Foruscorp.FuelStations.Domain.FuelStations.GeoPoint", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("FuelStationId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("Longitude");

                            b1.HasKey("FuelStationId");

                            b1.HasIndex("Latitude");

                            b1.HasIndex("Longitude");

                            b1.ToTable("FuelStations", "FuelStation");

                            b1.WithOwner()
                                .HasForeignKey("FuelStationId");
                        });

                    b.Navigation("Coordinates");

                    b.Navigation("FuelPrices");
                });

            modelBuilder.Entity("Foruscorp.FuelStations.Domain.FuelStations.PriceLoadAttempt", b =>
                {
                    b.OwnsMany("Foruscorp.FuelStations.Domain.FuelStations.FileProcessingResult", "FileResults", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("ErrorMessage")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<bool>("IsSuccess")
                                .HasColumnType("boolean");

                            b1.Property<Guid>("PriceLoadAttemptId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("ProcessedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id");

                            b1.HasIndex("FileName");

                            b1.HasIndex("IsSuccess");

                            b1.HasIndex("PriceLoadAttemptId");

                            b1.HasIndex("ProcessedAt");

                            b1.ToTable("FileProcessingResults", "FuelStation");

                            b1.WithOwner()
                                .HasForeignKey("PriceLoadAttemptId");
                        });

                    b.Navigation("FileResults");
                });
#pragma warning restore 612, 618
        }
    }
}
