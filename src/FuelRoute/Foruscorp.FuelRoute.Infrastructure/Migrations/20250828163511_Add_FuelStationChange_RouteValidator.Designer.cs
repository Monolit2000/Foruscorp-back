// <auto-generated />
using System;
using Foruscorp.FuelRoutes.Infrastructure.Percistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Foruscorp.FuelRoutes.Infrastructure.Migrations
{
    [DbContext(typeof(FuelRouteContext))]
    [Migration("20250828163511_Add_FuelStationChange_RouteValidator")]
    partial class Add_FuelStationChange_RouteValidator
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FuelRoutes")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("FuelRouteId");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentVersion")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeclinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DestinationLocationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsComplet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeclined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSended")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OriginLocationId")
                        .HasColumnType("uuid");

                    b.Property<double>("RemainingFuel")
                        .HasColumnType("double precision");

                    b.Property<int>("RouteVersion")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("TotalCountRoutVersions")
                        .HasColumnType("integer");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uuid");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("OriginLocationId");

                    b.HasIndex("TruckId");

                    b.ToTable("FuelRoutes", "FuelRoutes");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRouteSection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("EncodeRoute")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("FuelNeeded")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<int>("RouteVersion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteSections", "FuelRoutes");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRouteStation", b =>
                {
                    b.Property<Guid>("FuelStationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<double>("CurrentFuel")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FuelPointId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FuelRouteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAlgorithm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOld")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlaned")
                        .HasColumnType("boolean");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NextDistanceKm")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Refill")
                        .HasColumnType("text");

                    b.Property<Guid>("RoadSectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("RouteVersion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StopOrder")
                        .HasColumnType("integer");

                    b.HasKey("FuelStationId");

                    b.HasIndex("FuelRouteId");

                    b.HasIndex("RoadSectionId");

                    b.ToTable("RouteFuelPoints", "FuelRoutes");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.LocationPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("LocationPointId");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<int>("RouteVersion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("LocationPoints", "FuelRoutes");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.MapPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("MapPoints", "FuelRoutes");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.RouteValidators.FuelStationChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CurrentFuel")
                        .HasColumnType("double precision");

                    b.Property<double>("ForwardDistance")
                        .HasColumnType("double precision");

                    b.Property<Guid>("FuelRouteStationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAlgo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsManual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<double>("Refill")
                        .HasColumnType("double precision");

                    b.Property<Guid>("RouteValidatorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FuelRouteStationId");

                    b.HasIndex("IsAlgo");

                    b.HasIndex("IsManual");

                    b.HasIndex("RouteValidatorId");

                    b.ToTable("FuelStationChanges", "FuelRoutes");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.RouteValidators.RouteValidator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FuelRouteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FuelRouteSectionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("FuelRouteId");

                    b.HasIndex("FuelRouteSectionId");

                    b.HasIndex("IsValid");

                    b.ToTable("RouteValidators", "FuelRoutes");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", b =>
                {
                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.LocationPoint", "DestinationLocation")
                        .WithMany()
                        .HasForeignKey("DestinationLocationId");

                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.LocationPoint", "OriginLocation")
                        .WithMany()
                        .HasForeignKey("OriginLocationId");

                    b.Navigation("DestinationLocation");

                    b.Navigation("OriginLocation");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRouteSection", b =>
                {
                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", null)
                        .WithMany("RouteSections")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.RouteSectionInfo", "RouteSectionInfo", b1 =>
                        {
                            b1.Property<Guid>("FuelRouteSectionId")
                                .HasColumnType("uuid");

                            b1.Property<int>("DriveTime")
                                .HasColumnType("integer")
                                .HasColumnName("DriveTime");

                            b1.Property<double>("Gallons")
                                .HasColumnType("double precision")
                                .HasColumnName("Gallons");

                            b1.Property<double>("Miles")
                                .HasColumnType("double precision")
                                .HasColumnName("Miles");

                            b1.Property<double>("Tolls")
                                .HasColumnType("double precision")
                                .HasColumnName("Tolls");

                            b1.HasKey("FuelRouteSectionId");

                            b1.ToTable("RouteSections", "FuelRoutes");

                            b1.WithOwner()
                                .HasForeignKey("FuelRouteSectionId");
                        });

                    b.Navigation("RouteSectionInfo");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRouteStation", b =>
                {
                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", null)
                        .WithMany("FuelRouteStations")
                        .HasForeignKey("FuelRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRouteSection", null)
                        .WithMany("FuelRouteStations")
                        .HasForeignKey("RoadSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.LocationPoint", b =>
                {
                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", null)
                        .WithMany()
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.MapPoint", b =>
                {
                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", null)
                        .WithMany("MapPoints")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.GeoPoint", "GeoPoint", b1 =>
                        {
                            b1.Property<Guid>("MapPointId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("Longitude");

                            b1.HasKey("MapPointId");

                            b1.ToTable("MapPoints", "FuelRoutes");

                            b1.WithOwner()
                                .HasForeignKey("MapPointId");
                        });

                    b.Navigation("GeoPoint");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.RouteValidators.FuelStationChange", b =>
                {
                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRouteStation", "FuelStation")
                        .WithMany()
                        .HasForeignKey("FuelRouteStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foruscorp.FuelRoutes.Domain.RouteValidators.RouteValidator", null)
                        .WithMany("FuelStationChanges")
                        .HasForeignKey("RouteValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelStation");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.RouteValidators.RouteValidator", b =>
                {
                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", "FuelRoute")
                        .WithMany()
                        .HasForeignKey("FuelRouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRouteSection", "FuelRouteSection")
                        .WithMany()
                        .HasForeignKey("FuelRouteSectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FuelRoute");

                    b.Navigation("FuelRouteSection");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", b =>
                {
                    b.Navigation("FuelRouteStations");

                    b.Navigation("MapPoints");

                    b.Navigation("RouteSections");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRouteSection", b =>
                {
                    b.Navigation("FuelRouteStations");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.RouteValidators.RouteValidator", b =>
                {
                    b.Navigation("FuelStationChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
