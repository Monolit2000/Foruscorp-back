// <auto-generated />
using System;
using Foruscorp.FuelRoutes.Infrastructure.Percistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Foruscorp.FuelRoutes.Infrastructure.Migrations
{
    [DbContext(typeof(FuelRouteContext))]
    partial class FuelRouteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FuelRoute")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("FuelRouteId");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TruckId");

                    b.ToTable("FuelRoutes", "FuelRoute");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", b =>
                {
                    b.OwnsMany("Foruscorp.FuelRoutes.Domain.FuelRoutes.RouteFuelPoint", "FuelPoints", b1 =>
                        {
                            b1.Property<Guid>("FuelPointId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("FuelPointId");

                            b1.Property<decimal>("FuelPrice")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("FuelPrice");

                            b1.Property<Guid>("FuelRouteId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("ScheduledTime")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("FuelPointId");

                            b1.HasIndex("FuelRouteId");

                            b1.ToTable("RouteFuelPoints", "FuelRoute");

                            b1.WithOwner()
                                .HasForeignKey("FuelRouteId");

                            b1.OwnsOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.GeoPoint", "Location", b2 =>
                                {
                                    b2.Property<Guid>("RouteFuelPointFuelPointId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("Latitude")
                                        .HasColumnType("decimal(9,6)")
                                        .HasColumnName("Latitude");

                                    b2.Property<decimal>("Longitude")
                                        .HasColumnType("decimal(9,6)")
                                        .HasColumnName("GeoPoint");

                                    b2.HasKey("RouteFuelPointFuelPointId");

                                    b2.ToTable("RouteFuelPoints", "FuelRoute");

                                    b2.WithOwner()
                                        .HasForeignKey("RouteFuelPointFuelPointId");
                                });

                            b1.Navigation("Location");
                        });

                    b.Navigation("FuelPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
