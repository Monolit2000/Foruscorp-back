// <auto-generated />
using System;
using Foruscorp.FuelRoutes.Infrastructure.Percistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Foruscorp.FuelRoutes.Infrastructure.Migrations
{
    [DbContext(typeof(FuelRouteContext))]
    [Migration("20250622172206_Update_FuelStation_DomainModel")]
    partial class Update_FuelStation_DomainModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FuelRoutes")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("FuelRouteId");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DestinationLocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("EncodeRoute")
                        .HasColumnType("text");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OriginLocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("OriginLocationId");

                    b.HasIndex("TruckId");

                    b.ToTable("FuelRoutes", "FuelRoutes");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.LocationPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("LocationPointId");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("LocationPoints", "FuelRoutes");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.MapPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("MapPoints", "FuelRoutes");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", b =>
                {
                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.LocationPoint", "DestinationLocation")
                        .WithMany()
                        .HasForeignKey("DestinationLocationId");

                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.LocationPoint", "OriginLocation")
                        .WithMany()
                        .HasForeignKey("OriginLocationId");

                    b.OwnsMany("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelStopStation", "FuelStopStations", b1 =>
                        {
                            b1.Property<Guid>("FuelPointId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("FuelPointId");

                            b1.Property<decimal>("FuelPrice")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("FuelPrice");

                            b1.Property<Guid>("FuelRouteId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsAlgorithm")
                                .HasColumnType("boolean");

                            b1.Property<string>("Latitude")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Longitude")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("NextDistanceKm")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Refill")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("RoadSectionId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("ScheduledTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("StopOrder")
                                .HasColumnType("integer");

                            b1.HasKey("FuelPointId");

                            b1.HasIndex("FuelRouteId");

                            b1.ToTable("RouteFuelPoints", "FuelRoutes");

                            b1.WithOwner()
                                .HasForeignKey("FuelRouteId");
                        });

                    b.OwnsMany("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRouteSection", "RouteSections", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("EncodeRoute")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("RouteId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("RouteId");

                            b1.ToTable("RouteSections", "FuelRoutes");

                            b1.WithOwner()
                                .HasForeignKey("RouteId");
                        });

                    b.Navigation("DestinationLocation");

                    b.Navigation("FuelStopStations");

                    b.Navigation("OriginLocation");

                    b.Navigation("RouteSections");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.LocationPoint", b =>
                {
                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", null)
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.MapPoint", b =>
                {
                    b.HasOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", null)
                        .WithMany("MapPoints")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Foruscorp.FuelRoutes.Domain.FuelRoutes.GeoPoint", "GeoPoint", b1 =>
                        {
                            b1.Property<Guid>("MapPointId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("Longitude");

                            b1.HasKey("MapPointId");

                            b1.ToTable("MapPoints", "FuelRoutes");

                            b1.WithOwner()
                                .HasForeignKey("MapPointId");
                        });

                    b.Navigation("GeoPoint");
                });

            modelBuilder.Entity("Foruscorp.FuelRoutes.Domain.FuelRoutes.FuelRoute", b =>
                {
                    b.Navigation("MapPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
