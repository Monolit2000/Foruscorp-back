// <auto-generated />
using System;
using Foruscorp.Push.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Foruscorp.Push.Migrations
{
    [DbContext(typeof(PushNotificationsContext))]
    [Migration("20250705120249_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("PushNotifications")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Foruscorp.Push.Domain.Devices.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Devices", "PushNotifications");
                });

            modelBuilder.Entity("Foruscorp.Push.Domain.PushNotifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("Notifications", "PushNotifications");
                });

            modelBuilder.Entity("Foruscorp.Push.Domain.PushNotifications.NotificationRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationRecipients", "PushNotifications");
                });

            modelBuilder.Entity("Foruscorp.Push.Domain.Devices.Device", b =>
                {
                    b.OwnsOne("Foruscorp.Push.Domain.Devices.ExpoPushToken", "Token", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("PushToken");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices", "PushNotifications");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.Navigation("Token")
                        .IsRequired();
                });

            modelBuilder.Entity("Foruscorp.Push.Domain.PushNotifications.Notification", b =>
                {
                    b.OwnsOne("Foruscorp.Push.Domain.PushNotifications.NotificationContent", "Content", b1 =>
                        {
                            b1.Property<Guid>("NotificationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("Body");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Title");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notifications", "PushNotifications");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("Foruscorp.Push.Domain.PushNotifications.NotificationPayload", "Payload", b1 =>
                        {
                            b1.Property<Guid>("NotificationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Data")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("Payload");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notifications", "PushNotifications");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Payload")
                        .IsRequired();
                });

            modelBuilder.Entity("Foruscorp.Push.Domain.PushNotifications.NotificationRecipient", b =>
                {
                    b.HasOne("Foruscorp.Push.Domain.Devices.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foruscorp.Push.Domain.PushNotifications.Notification", "Notification")
                        .WithMany("Recipients")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Foruscorp.Push.Domain.PushNotifications.Notification", b =>
                {
                    b.Navigation("Recipients");
                });
#pragma warning restore 612, 618
        }
    }
}
