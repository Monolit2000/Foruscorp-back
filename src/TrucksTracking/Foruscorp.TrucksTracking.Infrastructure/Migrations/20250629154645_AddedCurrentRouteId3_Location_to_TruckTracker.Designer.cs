// <auto-generated />
using System;
using Foruscorp.TrucksTracking.Infrastructure.Percistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Foruscorp.TrucksTracking.Infrastructure.Migrations
{
    [DbContext(typeof(TuckTrackingContext))]
    [Migration("20250629154645_AddedCurrentRouteId3_Location_to_TruckTracker")]
    partial class AddedCurrentRouteId3_Location_to_TruckTracker
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("TuckTracking")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Foruscorp.TrucksTracking.Domain.Trucks.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("RouteId");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uuid")
                        .HasColumnName("TruckId");

                    b.Property<Guid>("TruckTrackerId")
                        .HasColumnType("uuid")
                        .HasColumnName("TruckTrackerId");

                    b.HasKey("Id");

                    b.HasIndex("TruckId");

                    b.HasIndex("TruckTrackerId");

                    b.ToTable("Routes", "TuckTracking");
                });

            modelBuilder.Entity("Foruscorp.TrucksTracking.Domain.Trucks.TruckFuel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("TruckFuelId");

                    b.Property<double>("NewFuelLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("PreviousFuelLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TruckLocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TruckTrackerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TruckLocationId");

                    b.HasIndex("TruckTrackerId");

                    b.ToTable("TruckFuelHistory", "TuckTracking");
                });

            modelBuilder.Entity("Foruscorp.TrucksTracking.Domain.Trucks.TruckLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("TruckLocationId");

                    b.Property<string>("FormattedLocation")
                        .HasColumnType("text");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TruckTrackerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TruckTrackerId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TruckTrackerId");

                    b.HasIndex("TruckTrackerId1")
                        .IsUnique();

                    b.ToTable("TruckLocationHistory", "TuckTracking");
                });

            modelBuilder.Entity("Foruscorp.TrucksTracking.Domain.Trucks.TruckTracker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("CurrentRouteId")
                        .HasColumnType("uuid");

                    b.Property<double>("FuelStatus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProviderTruckId")
                        .HasColumnType("text");

                    b.Property<int>("TruckEngineStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uuid")
                        .HasColumnName("TruckId");

                    b.Property<int>("TruckStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TruckTrackerStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRouteId")
                        .IsUnique();

                    b.HasIndex("TruckId");

                    b.ToTable("TruckTrackers", "TuckTracking");
                });

            modelBuilder.Entity("Foruscorp.TrucksTracking.Domain.Trucks.Route", b =>
                {
                    b.HasOne("Foruscorp.TrucksTracking.Domain.Trucks.TruckTracker", null)
                        .WithMany("Routes")
                        .HasForeignKey("TruckTrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foruscorp.TrucksTracking.Domain.Trucks.TruckFuel", b =>
                {
                    b.HasOne("Foruscorp.TrucksTracking.Domain.Trucks.TruckLocation", "TruckLocation")
                        .WithMany()
                        .HasForeignKey("TruckLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Foruscorp.TrucksTracking.Domain.Trucks.TruckTracker", null)
                        .WithMany("FuelHistory")
                        .HasForeignKey("TruckTrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TruckLocation");
                });

            modelBuilder.Entity("Foruscorp.TrucksTracking.Domain.Trucks.TruckLocation", b =>
                {
                    b.HasOne("Foruscorp.TrucksTracking.Domain.Trucks.TruckTracker", null)
                        .WithMany("TruckLocationHistory")
                        .HasForeignKey("TruckTrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foruscorp.TrucksTracking.Domain.Trucks.TruckTracker", null)
                        .WithOne("CurrentTruckLocation")
                        .HasForeignKey("Foruscorp.TrucksTracking.Domain.Trucks.TruckLocation", "TruckTrackerId1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Foruscorp.TrucksTracking.Domain.Trucks.GeoPoint", "Location", b1 =>
                        {
                            b1.Property<Guid>("TruckLocationId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasColumnType("decimal(9,6)")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("decimal(9,6)")
                                .HasColumnName("Longitude");

                            b1.HasKey("TruckLocationId");

                            b1.ToTable("TruckLocationHistory", "TuckTracking");

                            b1.WithOwner()
                                .HasForeignKey("TruckLocationId");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Foruscorp.TrucksTracking.Domain.Trucks.TruckTracker", b =>
                {
                    b.HasOne("Foruscorp.TrucksTracking.Domain.Trucks.Route", "CurrentRoute")
                        .WithOne()
                        .HasForeignKey("Foruscorp.TrucksTracking.Domain.Trucks.TruckTracker", "CurrentRouteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentRoute");
                });

            modelBuilder.Entity("Foruscorp.TrucksTracking.Domain.Trucks.TruckTracker", b =>
                {
                    b.Navigation("CurrentTruckLocation");

                    b.Navigation("FuelHistory");

                    b.Navigation("Routes");

                    b.Navigation("TruckLocationHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
